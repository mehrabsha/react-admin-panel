'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rtlcss = require('rtlcss');

var _rtlcss2 = _interopRequireDefault(_rtlcss);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var isWebpack5 = parseInt(_webpack2.default.version, 10) === 5;

var cssOnly = function cssOnly(filename) {
  return _path2.default.extname(filename) === '.css';
};

var RtlCssPlugin = function () {
  function RtlCssPlugin(options) {
    var _this = this;

    _classCallCheck(this, RtlCssPlugin);

    this.processAssets = function (compilation, callback) {
      // webpack 5 turned this from an array to a set
      var chunks = isWebpack5 ? Array.from(compilation.chunks) : compilation.chunks;

      // Explore each chunk (build output):
      chunks.forEach(function (chunk) {
        // Explore each asset filename generated by the chunk:
        // webpack 5 turned this from an array to a set
        var files = isWebpack5 ? Array.from(chunk.files) : chunk.files;

        files.filter(cssOnly).forEach(function (filename) {
          // Get the asset source for each file generated by the chunk:
          var src = compilation.assets[filename].source();
          var dst = _rtlcss2.default.process(src);
          var dstFileName = compilation.getPath(_this.options.filename, {
            chunk: chunk,
            cssFileName: filename
          });

          if (isWebpack5) {
            compilation.assets[dstFileName] = new _webpack2.default.sources.RawSource(dst);
            chunk.files.add(dstFileName);
          } else {
            compilation.assets[dstFileName] = {
              source: function source() {
                return dst;
              },
              size: function size() {
                return dst.length;
              }
            };

            chunk.files.push(dstFileName);
          }
        });
      });

      callback();
    };

    if (typeof options === 'string') {
      options = {
        filename: options
      };
    }
    this.options = options || {
      filename: '[name].rtl.css'
    };
  }

  RtlCssPlugin.prototype.apply = function apply(compiler) {
    var _this2 = this;

    if (isWebpack5) {
      compiler.hooks.compilation.tap('RtlCssPlugin', function (compilation) {
        compilation.hooks.processAssets.tapAsync({
          name: 'TPAStylePlugin.pluginName',
          stage: compilation.PROCESS_ASSETS_STAGE_OPTIMIZE
        }, function (chunks, callback) {
          return _this2.processAssets(compilation, callback);
        });
      });
    } else {
      compiler.hooks.emit.tapAsync('RtlCssPlugin', this.processAssets);
    }
  };

  return RtlCssPlugin;
}();

module.exports = RtlCssPlugin;