{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { invariantIntlContext } from '../utils';\n\nfunction getDisplayName(Component) {\n  return Component.displayName || Component.name || 'Component';\n} // TODO: We should provide initial value here\n\n\nvar IntlContext = React.createContext(null);\nvar IntlConsumer = IntlContext.Consumer,\n    IntlProvider = IntlContext.Provider;\nexport var Provider = IntlProvider;\nexport var Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n  var _a = options || {},\n      _b = _a.intlPropName,\n      intlPropName = _b === void 0 ? 'intl' : _b,\n      _c = _a.forwardRef,\n      forwardRef = _c === void 0 ? false : _c,\n      _d = _a.enforceContext,\n      enforceContext = _d === void 0 ? true : _d;\n\n  var WithIntl = function (props) {\n    return React.createElement(IntlConsumer, null, function (intl) {\n      var _a;\n\n      if (enforceContext) {\n        invariantIntlContext(intl);\n      }\n\n      var intlProp = (_a = {}, _a[intlPropName] = intl, _a);\n      return React.createElement(WrappedComponent, __assign({}, props, intlProp, {\n        ref: forwardRef ? props.forwardedRef : null\n      }));\n    });\n  };\n\n  WithIntl.displayName = \"injectIntl(\" + getDisplayName(WrappedComponent) + \")\";\n  WithIntl.WrappedComponent = WrappedComponent;\n\n  if (forwardRef) {\n    return hoistNonReactStatics(React.forwardRef(function (props, ref) {\n      return React.createElement(WithIntl, __assign({}, props, {\n        forwardedRef: ref\n      }));\n    }), WrappedComponent);\n  }\n\n  return hoistNonReactStatics(WithIntl, WrappedComponent);\n}","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/node_modules/react-intl/lib/src/components/injectIntl.js"],"names":["__assign","React","hoistNonReactStatics","invariantIntlContext","getDisplayName","Component","displayName","name","IntlContext","createContext","IntlConsumer","Consumer","IntlProvider","Provider","Context","injectIntl","WrappedComponent","options","_a","_b","intlPropName","_c","forwardRef","_d","enforceContext","WithIntl","props","createElement","intl","intlProp","ref","forwardedRef"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,SAASC,oBAAT,QAAqC,UAArC;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AAC/B,SAAOA,SAAS,CAACC,WAAV,IAAyBD,SAAS,CAACE,IAAnC,IAA2C,WAAlD;AACH,C,CACD;;;AACA,IAAIC,WAAW,GAAGP,KAAK,CAACQ,aAAN,CAAoB,IAApB,CAAlB;AACA,IAAIC,YAAY,GAAGF,WAAW,CAACG,QAA/B;AAAA,IAAyCC,YAAY,GAAGJ,WAAW,CAACK,QAApE;AACA,OAAO,IAAIA,QAAQ,GAAGD,YAAf;AACP,OAAO,IAAIE,OAAO,GAAGN,WAAd;AACP,eAAe,SAASO,UAAT,CAAoBC,gBAApB,EAAsCC,OAAtC,EAA+C;AAC1D,MAAIC,EAAE,GAAGD,OAAO,IAAI,EAApB;AAAA,MAAwBE,EAAE,GAAGD,EAAE,CAACE,YAAhC;AAAA,MAA8CA,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,MAAhB,GAAyBA,EAAtF;AAAA,MAA0FE,EAAE,GAAGH,EAAE,CAACI,UAAlG;AAAA,MAA8GA,UAAU,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAnJ;AAAA,MAAuJE,EAAE,GAAGL,EAAE,CAACM,cAA/J;AAAA,MAA+KA,cAAc,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAvN;;AACA,MAAIE,QAAQ,GAAG,UAAUC,KAAV,EAAiB;AAAE,WAAQzB,KAAK,CAAC0B,aAAN,CAAoBjB,YAApB,EAAkC,IAAlC,EAAwC,UAAUkB,IAAV,EAAgB;AAC9F,UAAIV,EAAJ;;AACA,UAAIM,cAAJ,EAAoB;AAChBrB,QAAAA,oBAAoB,CAACyB,IAAD,CAApB;AACH;;AACD,UAAIC,QAAQ,IAAIX,EAAE,GAAG,EAAL,EAASA,EAAE,CAACE,YAAD,CAAF,GAAmBQ,IAA5B,EAAkCV,EAAtC,CAAZ;AACA,aAAQjB,KAAK,CAAC0B,aAAN,CAAoBX,gBAApB,EAAsChB,QAAQ,CAAC,EAAD,EAAK0B,KAAL,EAAYG,QAAZ,EAAsB;AAAEC,QAAAA,GAAG,EAAER,UAAU,GAAGI,KAAK,CAACK,YAAT,GAAwB;AAAzC,OAAtB,CAA9C,CAAR;AACH,KAPyC,CAAR;AAO5B,GAPN;;AAQAN,EAAAA,QAAQ,CAACnB,WAAT,GAAuB,gBAAgBF,cAAc,CAACY,gBAAD,CAA9B,GAAmD,GAA1E;AACAS,EAAAA,QAAQ,CAACT,gBAAT,GAA4BA,gBAA5B;;AACA,MAAIM,UAAJ,EAAgB;AACZ,WAAOpB,oBAAoB,CAACD,KAAK,CAACqB,UAAN,CAAiB,UAAUI,KAAV,EAAiBI,GAAjB,EAAsB;AAAE,aAAQ7B,KAAK,CAAC0B,aAAN,CAAoBF,QAApB,EAA8BzB,QAAQ,CAAC,EAAD,EAAK0B,KAAL,EAAY;AAAEK,QAAAA,YAAY,EAAED;AAAhB,OAAZ,CAAtC,CAAR;AAAqF,KAA9H,CAAD,EAAkId,gBAAlI,CAA3B;AACH;;AACD,SAAOd,oBAAoB,CAACuB,QAAD,EAAWT,gBAAX,CAA3B;AACH","sourcesContent":["import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { invariantIntlContext } from '../utils';\nfunction getDisplayName(Component) {\n    return Component.displayName || Component.name || 'Component';\n}\n// TODO: We should provide initial value here\nvar IntlContext = React.createContext(null);\nvar IntlConsumer = IntlContext.Consumer, IntlProvider = IntlContext.Provider;\nexport var Provider = IntlProvider;\nexport var Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n    var _a = options || {}, _b = _a.intlPropName, intlPropName = _b === void 0 ? 'intl' : _b, _c = _a.forwardRef, forwardRef = _c === void 0 ? false : _c, _d = _a.enforceContext, enforceContext = _d === void 0 ? true : _d;\n    var WithIntl = function (props) { return (React.createElement(IntlConsumer, null, function (intl) {\n        var _a;\n        if (enforceContext) {\n            invariantIntlContext(intl);\n        }\n        var intlProp = (_a = {}, _a[intlPropName] = intl, _a);\n        return (React.createElement(WrappedComponent, __assign({}, props, intlProp, { ref: forwardRef ? props.forwardedRef : null })));\n    })); };\n    WithIntl.displayName = \"injectIntl(\" + getDisplayName(WrappedComponent) + \")\";\n    WithIntl.WrappedComponent = WrappedComponent;\n    if (forwardRef) {\n        return hoistNonReactStatics(React.forwardRef(function (props, ref) { return (React.createElement(WithIntl, __assign({}, props, { forwardedRef: ref }))); }), WrappedComponent);\n    }\n    return hoistNonReactStatics(WithIntl, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"module"}