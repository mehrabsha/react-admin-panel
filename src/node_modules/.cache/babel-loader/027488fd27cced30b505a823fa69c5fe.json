{"ast":null,"code":"import { LOGIN_URL, GET_USER_BY_ACCESSTOKEN_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from '../redux/AuthCRUD';\nimport { UsersTableMock } from './usersTableMock';\nexport function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(({\n    data\n  }) => {\n    const {\n      email,\n      password\n    } = JSON.parse(data);\n\n    if (email && password) {\n      const user = UsersTableMock.table.find(x => x.email.toLowerCase() === email.toLowerCase() && x.password === password);\n\n      if (user) {\n        const auth = user.auth;\n        return [200, { ...auth,\n          password: undefined\n        }];\n      }\n    }\n\n    return [400];\n  });\n  mock.onPost(REGISTER_URL).reply(({\n    data\n  }) => {\n    const {\n      email,\n      firstname,\n      lastname,\n      password\n    } = JSON.parse(data);\n\n    if (email && firstname && lastname && password) {\n      const user = {\n        id: generateUserId(),\n        email,\n        firstname,\n        lastname,\n        username: `${firstname}-${lastname}`,\n        password,\n        roles: [2],\n        // Manager\n        auth: {\n          accessToken: 'access-token-' + Math.random(),\n          refreshToken: 'access-token-' + Math.random()\n        },\n        pic: process.env.PUBLIC_URL + '/media/users/default.jpg'\n      };\n      UsersTableMock.table.push(user);\n      const auth = user.auth;\n      return [200, { ...auth,\n        password: undefined\n      }];\n    }\n\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({\n    data\n  }) => {\n    const {\n      email\n    } = JSON.parse(data);\n\n    if (email) {\n      const user = UsersTableMock.table.find(x => x.email.toLowerCase() === email.toLowerCase());\n      let result = false;\n\n      if (user) {\n        user.password = undefined;\n        result = true;\n        return [200, {\n          result,\n          password: undefined\n        }];\n      }\n    }\n\n    return [400];\n  });\n  mock.onGet(GET_USER_BY_ACCESSTOKEN_URL).reply(({\n    headers: {\n      Authorization\n    }\n  }) => {\n    const accessToken = Authorization && Authorization.startsWith('Bearer ') && Authorization.slice('Bearer '.length);\n\n    if (accessToken) {\n      const user = UsersTableMock.table.find(x => {\n        var _x$auth;\n\n        return ((_x$auth = x.auth) === null || _x$auth === void 0 ? void 0 : _x$auth.accessToken) === accessToken;\n      });\n\n      if (user) {\n        return [200, { ...user,\n          password: undefined\n        }];\n      }\n    }\n\n    return [401];\n  });\n\n  function generateUserId() {\n    const ids = UsersTableMock.table.map(el => el.id);\n    const maxId = Math.max(...ids);\n    return maxId + 1;\n  }\n}","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/app/modules/auth/__mocks__/mockAuth.ts"],"names":["LOGIN_URL","GET_USER_BY_ACCESSTOKEN_URL","REGISTER_URL","REQUEST_PASSWORD_URL","UsersTableMock","mockAuth","mock","onPost","reply","data","email","password","JSON","parse","user","table","find","x","toLowerCase","auth","undefined","firstname","lastname","id","generateUserId","username","roles","accessToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","push","result","onGet","headers","Authorization","startsWith","slice","length","ids","map","el","maxId","max"],"mappings":"AAEA,SACEA,SADF,EAEEC,2BAFF,EAGEC,YAHF,EAIEC,oBAJF,QAKO,mBALP;AAMA,SAAQC,cAAR,QAA6B,kBAA7B;AAEA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAqC;AAC1CA,EAAAA,IAAI,CAACC,MAAL,CAAYP,SAAZ,EAAuBQ,KAAvB,CAA6B,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AACvC,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAoBC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAA1B;;AAEA,QAAIC,KAAK,IAAIC,QAAb,EAAuB;AACrB,YAAMG,IAAI,GAAGV,cAAc,CAACW,KAAf,CAAqBC,IAArB,CACVC,CAAD,IAAOA,CAAC,CAACP,KAAF,CAAQQ,WAAR,OAA0BR,KAAK,CAACQ,WAAN,EAA1B,IAAiDD,CAAC,CAACN,QAAF,KAAeA,QAD5D,CAAb;;AAIA,UAAIG,IAAJ,EAAU;AACR,cAAMK,IAAI,GAAGL,IAAI,CAACK,IAAlB;AACA,eAAO,CAAC,GAAD,EAAM,EAAC,GAAGA,IAAJ;AAAUR,UAAAA,QAAQ,EAAES;AAApB,SAAN,CAAP;AACD;AACF;;AAED,WAAO,CAAC,GAAD,CAAP;AACD,GAfD;AAiBAd,EAAAA,IAAI,CAACC,MAAL,CAAYL,YAAZ,EAA0BM,KAA1B,CAAgC,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AAC1C,UAAM;AAACC,MAAAA,KAAD;AAAQW,MAAAA,SAAR;AAAmBC,MAAAA,QAAnB;AAA6BX,MAAAA;AAA7B,QAAyCC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAA/C;;AAEA,QAAIC,KAAK,IAAIW,SAAT,IAAsBC,QAAtB,IAAkCX,QAAtC,EAAgD;AAC9C,YAAMG,IAAe,GAAG;AACtBS,QAAAA,EAAE,EAAEC,cAAc,EADI;AAEtBd,QAAAA,KAFsB;AAGtBW,QAAAA,SAHsB;AAItBC,QAAAA,QAJsB;AAKtBG,QAAAA,QAAQ,EAAG,GAAEJ,SAAU,IAAGC,QAAS,EALb;AAMtBX,QAAAA,QANsB;AAOtBe,QAAAA,KAAK,EAAE,CAAC,CAAD,CAPe;AAOV;AACZP,QAAAA,IAAI,EAAE;AACJQ,UAAAA,WAAW,EAAE,kBAAkBC,IAAI,CAACC,MAAL,EAD3B;AAEJC,UAAAA,YAAY,EAAE,kBAAkBF,IAAI,CAACC,MAAL;AAF5B,SARgB;AAYtBE,QAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyB;AAZR,OAAxB;AAeA9B,MAAAA,cAAc,CAACW,KAAf,CAAqBoB,IAArB,CAA0BrB,IAA1B;AACA,YAAMK,IAAI,GAAGL,IAAI,CAACK,IAAlB;AAEA,aAAO,CAAC,GAAD,EAAM,EAAC,GAAGA,IAAJ;AAAUR,QAAAA,QAAQ,EAAES;AAApB,OAAN,CAAP;AACD;;AAED,WAAO,CAAC,GAAD,CAAP;AACD,GA1BD;AA4BAd,EAAAA,IAAI,CAACC,MAAL,CAAYJ,oBAAZ,EAAkCK,KAAlC,CAAwC,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AAClD,UAAM;AAACC,MAAAA;AAAD,QAAUE,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAhB;;AAEA,QAAIC,KAAJ,EAAW;AACT,YAAMI,IAAI,GAAGV,cAAc,CAACW,KAAf,CAAqBC,IAArB,CAA2BC,CAAD,IAAOA,CAAC,CAACP,KAAF,CAAQQ,WAAR,OAA0BR,KAAK,CAACQ,WAAN,EAA3D,CAAb;AACA,UAAIkB,MAAM,GAAG,KAAb;;AACA,UAAItB,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACH,QAAL,GAAgBS,SAAhB;AACAgB,QAAAA,MAAM,GAAG,IAAT;AACA,eAAO,CAAC,GAAD,EAAM;AAACA,UAAAA,MAAD;AAASzB,UAAAA,QAAQ,EAAES;AAAnB,SAAN,CAAP;AACD;AACF;;AAED,WAAO,CAAC,GAAD,CAAP;AACD,GAdD;AAgBAd,EAAAA,IAAI,CAAC+B,KAAL,CAAWpC,2BAAX,EAAwCO,KAAxC,CAA8C,CAAC;AAAC8B,IAAAA,OAAO,EAAE;AAACC,MAAAA;AAAD;AAAV,GAAD,KAAgC;AAC5E,UAAMZ,WAAW,GACfY,aAAa,IAAIA,aAAa,CAACC,UAAd,CAAyB,SAAzB,CAAjB,IAAwDD,aAAa,CAACE,KAAd,CAAoB,UAAUC,MAA9B,CAD1D;;AAGA,QAAIf,WAAJ,EAAiB;AACf,YAAMb,IAAI,GAAGV,cAAc,CAACW,KAAf,CAAqBC,IAArB,CAA2BC,CAAD;AAAA;;AAAA,eAAO,YAAAA,CAAC,CAACE,IAAF,oDAAQQ,WAAR,MAAwBA,WAA/B;AAAA,OAA1B,CAAb;;AAEA,UAAIb,IAAJ,EAAU;AACR,eAAO,CAAC,GAAD,EAAM,EAAC,GAAGA,IAAJ;AAAUH,UAAAA,QAAQ,EAAES;AAApB,SAAN,CAAP;AACD;AACF;;AAED,WAAO,CAAC,GAAD,CAAP;AACD,GAbD;;AAeA,WAASI,cAAT,GAAkC;AAChC,UAAMmB,GAAG,GAAGvC,cAAc,CAACW,KAAf,CAAqB6B,GAArB,CAA0BC,EAAD,IAAQA,EAAE,CAACtB,EAApC,CAAZ;AACA,UAAMuB,KAAK,GAAGlB,IAAI,CAACmB,GAAL,CAAS,GAAGJ,GAAZ,CAAd;AACA,WAAOG,KAAK,GAAG,CAAf;AACD;AACF","sourcesContent":["import MockAdapter from 'axios-mock-adapter'\r\nimport {UserModel} from '../models/UserModel'\r\nimport {\r\n  LOGIN_URL,\r\n  GET_USER_BY_ACCESSTOKEN_URL,\r\n  REGISTER_URL,\r\n  REQUEST_PASSWORD_URL,\r\n} from '../redux/AuthCRUD'\r\nimport {UsersTableMock} from './usersTableMock'\r\n\r\nexport function mockAuth(mock: MockAdapter) {\r\n  mock.onPost(LOGIN_URL).reply(({data}) => {\r\n    const {email, password} = JSON.parse(data)\r\n\r\n    if (email && password) {\r\n      const user = UsersTableMock.table.find(\r\n        (x) => x.email.toLowerCase() === email.toLowerCase() && x.password === password\r\n      )\r\n\r\n      if (user) {\r\n        const auth = user.auth\r\n        return [200, {...auth, password: undefined}]\r\n      }\r\n    }\r\n\r\n    return [400]\r\n  })\r\n\r\n  mock.onPost(REGISTER_URL).reply(({data}) => {\r\n    const {email, firstname, lastname, password} = JSON.parse(data)\r\n\r\n    if (email && firstname && lastname && password) {\r\n      const user: UserModel = {\r\n        id: generateUserId(),\r\n        email,\r\n        firstname,\r\n        lastname,\r\n        username: `${firstname}-${lastname}`,\r\n        password,\r\n        roles: [2], // Manager\r\n        auth: {\r\n          accessToken: 'access-token-' + Math.random(),\r\n          refreshToken: 'access-token-' + Math.random(),\r\n        },\r\n        pic: process.env.PUBLIC_URL + '/media/users/default.jpg',\r\n      }\r\n\r\n      UsersTableMock.table.push(user)\r\n      const auth = user.auth\r\n\r\n      return [200, {...auth, password: undefined}]\r\n    }\r\n\r\n    return [400]\r\n  })\r\n\r\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({data}) => {\r\n    const {email} = JSON.parse(data)\r\n\r\n    if (email) {\r\n      const user = UsersTableMock.table.find((x) => x.email.toLowerCase() === email.toLowerCase())\r\n      let result = false\r\n      if (user) {\r\n        user.password = undefined\r\n        result = true\r\n        return [200, {result, password: undefined}]\r\n      }\r\n    }\r\n\r\n    return [400]\r\n  })\r\n\r\n  mock.onGet(GET_USER_BY_ACCESSTOKEN_URL).reply(({headers: {Authorization}}) => {\r\n    const accessToken =\r\n      Authorization && Authorization.startsWith('Bearer ') && Authorization.slice('Bearer '.length)\r\n\r\n    if (accessToken) {\r\n      const user = UsersTableMock.table.find((x) => x.auth?.accessToken === accessToken)\r\n\r\n      if (user) {\r\n        return [200, {...user, password: undefined}]\r\n      }\r\n    }\r\n\r\n    return [401]\r\n  })\r\n\r\n  function generateUserId(): number {\r\n    const ids = UsersTableMock.table.map((el) => el.id)\r\n    const maxId = Math.max(...ids)\r\n    return maxId + 1\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}