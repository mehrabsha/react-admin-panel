{"ast":null,"code":"import { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { getUserByToken } from './AuthCRUD';\nexport const actionTypes = {\n  Login: '[Login] Action',\n  Logout: '[Logout] Action',\n  Register: '[Register] Action',\n  UserRequested: '[Request User] Action',\n  UserLoaded: '[Load User] Auth API',\n  SetUser: '[Set User] Action'\n};\nconst initialAuthState = {\n  user: undefined,\n  accessToken: undefined\n};\nexport const reducer = persistReducer({\n  storage,\n  key: 'v100-demo1-auth',\n  whitelist: ['user', 'accessToken']\n}, (state = initialAuthState, action) => {\n  switch (action.type) {\n    case actionTypes.Login:\n      {\n        var _action$payload;\n\n        const accessToken = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.accessToken;\n        return {\n          accessToken,\n          user: undefined\n        };\n      }\n\n    case actionTypes.Register:\n      {\n        var _action$payload2;\n\n        const accessToken = (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.accessToken;\n        return {\n          accessToken,\n          user: undefined\n        };\n      }\n\n    case actionTypes.Logout:\n      {\n        return initialAuthState;\n      }\n\n    case actionTypes.UserRequested:\n      {\n        return { ...state,\n          user: undefined\n        };\n      }\n\n    case actionTypes.UserLoaded:\n      {\n        var _action$payload3;\n\n        const user = (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.user;\n        return { ...state,\n          user\n        };\n      }\n\n    case actionTypes.SetUser:\n      {\n        var _action$payload4;\n\n        const user = (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.user;\n        return { ...state,\n          user\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport const actions = {\n  login: accessToken => ({\n    type: actionTypes.Login,\n    payload: {\n      accessToken\n    }\n  }),\n  register: accessToken => ({\n    type: actionTypes.Register,\n    payload: {\n      accessToken\n    }\n  }),\n  logout: () => ({\n    type: actionTypes.Logout\n  }),\n  requestUser: () => ({\n    type: actionTypes.UserRequested\n  }),\n  fulfillUser: user => ({\n    type: actionTypes.UserLoaded,\n    payload: {\n      user\n    }\n  }),\n  setUser: user => ({\n    type: actionTypes.SetUser,\n    payload: {\n      user\n    }\n  })\n};\nexport function* saga() {\n  yield takeLatest(actionTypes.Login, function* loginSaga() {\n    yield put(actions.requestUser());\n  });\n  yield takeLatest(actionTypes.Register, function* registerSaga() {\n    yield put(actions.requestUser());\n  });\n  yield takeLatest(actionTypes.UserRequested, function* userRequested() {\n    const {\n      data: user\n    } = yield getUserByToken();\n    yield put(actions.fulfillUser(user));\n  });\n}","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/app/modules/auth/redux/AuthRedux.ts"],"names":["persistReducer","storage","put","takeLatest","getUserByToken","actionTypes","Login","Logout","Register","UserRequested","UserLoaded","SetUser","initialAuthState","user","undefined","accessToken","reducer","key","whitelist","state","action","type","payload","actions","login","register","logout","requestUser","fulfillUser","setUser","saga","loginSaga","registerSaga","userRequested","data"],"mappings":"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","sourcesContent":["import {Action} from '@reduxjs/toolkit'\r\nimport {persistReducer} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport {put, takeLatest} from 'redux-saga/effects'\r\nimport {UserModel} from '../models/UserModel'\r\nimport {getUserByToken} from './AuthCRUD'\r\n\r\nexport interface ActionWithPayload<T> extends Action {\r\n  payload?: T\r\n}\r\n\r\nexport const actionTypes = {\r\n  Login: '[Login] Action',\r\n  Logout: '[Logout] Action',\r\n  Register: '[Register] Action',\r\n  UserRequested: '[Request User] Action',\r\n  UserLoaded: '[Load User] Auth API',\r\n  SetUser: '[Set User] Action',\r\n}\r\n\r\nconst initialAuthState: IAuthState = {\r\n  user: undefined,\r\n  accessToken: undefined,\r\n}\r\n\r\nexport interface IAuthState {\r\n  user?: UserModel\r\n  accessToken?: string\r\n}\r\n\r\nexport const reducer = persistReducer(\r\n  {storage, key: 'v100-demo1-auth', whitelist: ['user', 'accessToken']},\r\n  (state: IAuthState = initialAuthState, action: ActionWithPayload<IAuthState>) => {\r\n    switch (action.type) {\r\n      case actionTypes.Login: {\r\n        const accessToken = action.payload?.accessToken\r\n        return {accessToken, user: undefined}\r\n      }\r\n\r\n      case actionTypes.Register: {\r\n        const accessToken = action.payload?.accessToken\r\n        return {accessToken, user: undefined}\r\n      }\r\n\r\n      case actionTypes.Logout: {\r\n        return initialAuthState\r\n      }\r\n\r\n      case actionTypes.UserRequested: {\r\n        return {...state, user: undefined}\r\n      }\r\n\r\n      case actionTypes.UserLoaded: {\r\n        const user = action.payload?.user\r\n        return {...state, user}\r\n      }\r\n\r\n      case actionTypes.SetUser: {\r\n        const user = action.payload?.user\r\n        return {...state, user}\r\n      }\r\n\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n)\r\n\r\nexport const actions = {\r\n  login: (accessToken: string) => ({type: actionTypes.Login, payload: {accessToken}}),\r\n  register: (accessToken: string) => ({\r\n    type: actionTypes.Register,\r\n    payload: {accessToken},\r\n  }),\r\n  logout: () => ({type: actionTypes.Logout}),\r\n  requestUser: () => ({\r\n    type: actionTypes.UserRequested,\r\n  }),\r\n  fulfillUser: (user: UserModel) => ({type: actionTypes.UserLoaded, payload: {user}}),\r\n  setUser: (user: UserModel) => ({type: actionTypes.SetUser, payload: {user}}),\r\n}\r\n\r\nexport function* saga() {\r\n  yield takeLatest(actionTypes.Login, function* loginSaga() {\r\n    yield put(actions.requestUser())\r\n  })\r\n\r\n  yield takeLatest(actionTypes.Register, function* registerSaga() {\r\n    yield put(actions.requestUser())\r\n  })\r\n\r\n  yield takeLatest(actionTypes.UserRequested, function* userRequested() {\r\n    const {data: user} = yield getUserByToken()\r\n    yield put(actions.fulfillUser(user))\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}