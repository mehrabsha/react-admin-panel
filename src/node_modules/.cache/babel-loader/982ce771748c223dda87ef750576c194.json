{"ast":null,"code":"import { EventHandlerUtil, DataUtil, getBreakpoint, getAttributeValueByBreakpoint, stringSnakeToCamel, getObjectPropertyValueByKey, getViewPort, isVisibleElement, throttle } from '../_utils/index';\nimport { MenuComponent, defaultMenuOptions } from './MenuComponent';\nconst defaultSearchOptions = {\n  minLength: 2,\n  // Miniam text lenght to query search\n  keypress: true,\n  // Enable search on keypress\n  enter: true,\n  // Enable search on enter key press\n  layout: 'menu',\n  // Use 'menu' or 'inline' layout options to display search results\n  showOnFocus: true // Always show menu on input focus\n\n};\nconst defaultSearchQueires = {\n  componentName: 'search',\n  instanseQuery: '[data-kt-search]',\n  attrQuery: 'data-kt-search-'\n};\n\nclass SearchComponent {\n  constructor(_element, _options, _queries) {\n    this.element = void 0;\n    this.contentElement = void 0;\n    this.formElement = void 0;\n    this.inputElement = void 0;\n    this.spinnerElement = void 0;\n    this.clearElement = void 0;\n    this.toggleElement = void 0;\n    this.submitElement = void 0;\n    this.toolbarElement = void 0;\n    this.resultsElement = void 0;\n    this.suggestionElement = void 0;\n    this.emptyElement = void 0;\n    this.layout = void 0;\n    this.options = void 0;\n    this.queries = void 0;\n    this.processing = false;\n    this.menuObject = void 0;\n\n    this._getElement = name => {\n      return this.element.querySelector('[data-kt-search-element=\"' + name + '\"]');\n    };\n\n    this.getOption = name => {\n      const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`);\n\n      if (attr) {\n        let value = getAttributeValueByBreakpoint(attr);\n\n        if (value !== null && String(value) === 'true') {\n          return true;\n        } else if (value !== null && String(value) === 'false') {\n          return false;\n        }\n\n        return value;\n      } else {\n        const optionName = stringSnakeToCamel(name);\n        const option = getObjectPropertyValueByKey(this.options, optionName);\n\n        if (option) {\n          return getAttributeValueByBreakpoint(option);\n        } else {\n          return null;\n        }\n      }\n    };\n\n    this.getResponsiveFormMode = () => {\n      const responsive = this.getOption('responsive');\n      const width = getViewPort().width;\n\n      if (!responsive) {\n        return null;\n      }\n\n      const breakpoint = getBreakpoint(responsive);\n      let breakPointNum = -1;\n\n      if (!breakpoint) {\n        breakPointNum = parseInt(responsive);\n      } else {\n        breakPointNum = +breakpoint;\n      }\n\n      if (width < breakPointNum) {\n        return 'on';\n      } else {\n        return 'off';\n      }\n    };\n\n    this.focus = () => {\n      this.element.classList.add('focus');\n\n      if (this.getOption('show-on-focus') === true || this.inputElement.value.length >= this.options.minLength) {\n        this.show();\n      }\n    };\n\n    this.blur = () => {\n      this.element.classList.remove('focus');\n    };\n\n    this.enter = e => {\n      const key = e.charCode || e.keyCode || 0;\n\n      if (key === 13) {\n        e.preventDefault();\n        this.search();\n      }\n    };\n\n    this.input = () => {\n      if (this.getOption('min-length')) {\n        const minLength = parseInt(this.getOption('min-length'));\n\n        if (this.inputElement.value.length >= minLength) {\n          this.search();\n        } else if (this.inputElement.value.length === 0) {\n          this.clear();\n        }\n      }\n    };\n\n    this.update = () => {\n      // Handle responsive form\n      if (this.layout === 'menu') {\n        let responsiveFormMode = this.getResponsiveFormMode();\n\n        if (responsiveFormMode === 'on' && this.contentElement.contains(this.formElement) === false) {\n          this.contentElement.prepend(this.formElement);\n          this.formElement.classList.remove('d-none');\n        } else if (responsiveFormMode === 'off' && this.contentElement.contains(this.formElement) === true) {\n          this.element.prepend(this.formElement);\n          this.formElement.classList.add('d-none');\n        }\n      }\n    };\n\n    this.show = () => {\n      if (this.menuObject) {\n        this.update();\n        this.menuObject.show(this.element);\n      }\n    };\n\n    this.hide = () => {\n      if (this.menuObject) {\n        this.update();\n        this.menuObject.hide(this.element);\n      }\n    };\n\n    this.search = () => {\n      if (this.processing === false) {\n        // Show search spinner\n        if (this.spinnerElement) {\n          this.spinnerElement.classList.remove('d-none');\n        } // Hide search clear button\n\n\n        if (this.clearElement) {\n          this.clearElement.classList.add('d-none');\n        } // Hide search toolbar\n\n\n        if (this.toolbarElement) {\n          this.toolbarElement.classList.add('d-none');\n        } // Focus input\n\n\n        this.inputElement.focus();\n        this.processing = true;\n        EventHandlerUtil.trigger(this.element, 'kt.search.process');\n      }\n    };\n\n    this.complete = () => {\n      if (this.spinnerElement) {\n        this.spinnerElement.classList.add('d-none');\n      } // Show search toolbar\n\n\n      if (this.clearElement) {\n        this.clearElement.classList.remove('d-none');\n      }\n\n      if (this.inputElement.value.length === 0) {\n        this.clear();\n      } // Focus input\n\n\n      this.inputElement.focus();\n      this.show();\n      this.processing = false;\n    };\n\n    this.clear = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.search.clear') === false) {\n        return;\n      } // Clear and focus input\n\n\n      this.inputElement.value = '';\n      this.inputElement.focus(); // Hide clear icon\n\n      if (this.clearElement) {\n        this.clearElement.classList.add('d-none');\n      } // Show search toolbar\n\n\n      if (this.toolbarElement) {\n        this.toolbarElement.classList.remove('d-none');\n      } // Hide menu\n\n\n      if (this.getOption('show-on-focus') === false) {\n        this.hide();\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.search.cleared');\n    };\n\n    this.isProcessing = () => {\n      return this.processing;\n    };\n\n    this.getQuery = () => {\n      return this.inputElement.value;\n    };\n\n    this.getMenu = () => {\n      return this.menuObject;\n    };\n\n    this.getFormElement = () => {\n      return this.formElement;\n    };\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = name => {\n      return EventHandlerUtil.off(this.element, name);\n    };\n\n    // Variables\n    this.options = Object.assign(defaultSearchOptions, _options);\n    this.queries = _queries; // Elements\n\n    this.element = _element;\n    this.contentElement = this._getElement('content');\n    this.formElement = this._getElement('form');\n    this.inputElement = this._getElement('input');\n    this.spinnerElement = this._getElement('spinner');\n    this.clearElement = this._getElement('clear');\n    this.toggleElement = this._getElement('toggle');\n    this.submitElement = this._getElement('submit');\n    this.toolbarElement = this._getElement('toolbar');\n    this.resultsElement = this._getElement('results');\n    this.suggestionElement = this._getElement('suggestion');\n    this.emptyElement = this._getElement('empty'); // Layout\n\n    this.layout = this.getOption('layout');\n\n    if (this.layout === 'menu') {\n      this.menuObject = new MenuComponent(this.contentElement, defaultMenuOptions);\n    } // Update\n\n\n    this.update(); // Event Handlers\n\n    this.handlers();\n    DataUtil.set(this.element, this.queries.componentName, this);\n  }\n\n  handlers() {\n    // Focus\n    this.inputElement.addEventListener('focus', this.focus); // Blur\n\n    this.inputElement.addEventListener('blur', this.blur); // Keypress\n\n    if (this.getOption('keypress') === true) {\n      this.inputElement.addEventListener('input', this.input);\n    } // Submit\n\n\n    if (this.submitElement) {\n      this.submitElement.addEventListener('click', this.search);\n    } // Enter\n\n\n    if (this.getOption('enter') === true) {\n      this.inputElement.addEventListener('keypress', this.enter);\n    } // Clear\n\n\n    if (this.clearElement) {\n      this.clearElement.addEventListener('click', this.clear);\n    } // Menu\n\n\n    if (this.menuObject) {\n      // Toggle menu\n      if (this.toggleElement) {\n        this.toggleElement.addEventListener('click', this.show);\n        this.menuObject.on('kt.menu.dropdown.show', function () {\n          // @ts-ignore\n          if (isVisibleElement(this.toggleElement)) {\n            // @ts-ignore\n            this.toggleElement.classList.add('active'); // @ts-ignore\n\n            this.toggleElement.classList.add('show');\n          }\n        });\n        this.menuObject.on('kt.menu.dropdown.hide', function () {\n          // @ts-ignore\n          if (isVisibleElement(this.toggleElement)) {\n            // @ts-ignore\n            this.toggleElement.classList.remove('active'); // @ts-ignore\n\n            this.toggleElement.classList.remove('show');\n          }\n        });\n      }\n\n      this.menuObject.on('kt.menu.dropdown.shown', function () {\n        // @ts-ignore\n        this.inputElement.focus();\n      });\n    } // Window resize handling\n\n\n    window.addEventListener('resize', () => {\n      let timer;\n      throttle(timer, () => {\n        this.update();\n      }, 200);\n    });\n  } ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Update\n\n\n  getInputElement() {\n    return this.inputElement;\n  }\n\n  getContentElement() {\n    return this.contentElement;\n  }\n\n  getElement() {\n    return this.element;\n  } // Event API\n\n\n}\n\nSearchComponent.getInstance = (el, componentName = defaultSearchQueires.componentName) => {\n  const Search = DataUtil.get(el, componentName);\n\n  if (Search) {\n    return Search;\n  }\n\n  return null;\n};\n\nSearchComponent.createInstances = (selector = defaultSearchQueires.instanseQuery, options = defaultSearchOptions, queries = defaultSearchQueires) => {\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let Search = SearchComponent.getInstance(item);\n\n    if (!Search) {\n      Search = new SearchComponent(item, options, queries);\n    }\n  });\n};\n\nSearchComponent.createInsance = (selector = defaultSearchQueires.instanseQuery, options = defaultSearchOptions, queries = defaultSearchQueires) => {\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let Search = SearchComponent.getInstance(item);\n\n  if (!Search) {\n    Search = new SearchComponent(item, options, queries);\n  }\n\n  return Search;\n};\n\nSearchComponent.bootstrap = (selector = defaultSearchQueires.instanseQuery) => {\n  SearchComponent.createInstances(selector);\n};\n\nSearchComponent.reinitialization = (selector = defaultSearchQueires.instanseQuery) => {\n  SearchComponent.createInstances(selector);\n};\n\nexport { SearchComponent, defaultSearchOptions, defaultSearchQueires };","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/assets/ts/components/SearchComponent.ts"],"names":["EventHandlerUtil","DataUtil","getBreakpoint","getAttributeValueByBreakpoint","stringSnakeToCamel","getObjectPropertyValueByKey","getViewPort","isVisibleElement","throttle","MenuComponent","defaultMenuOptions","defaultSearchOptions","minLength","keypress","enter","layout","showOnFocus","defaultSearchQueires","componentName","instanseQuery","attrQuery","SearchComponent","constructor","_element","_options","_queries","element","contentElement","formElement","inputElement","spinnerElement","clearElement","toggleElement","submitElement","toolbarElement","resultsElement","suggestionElement","emptyElement","options","queries","processing","menuObject","_getElement","name","querySelector","getOption","attr","getAttribute","value","String","optionName","option","getResponsiveFormMode","responsive","width","breakpoint","breakPointNum","parseInt","focus","classList","add","length","show","blur","remove","e","key","charCode","keyCode","preventDefault","search","input","clear","update","responsiveFormMode","contains","prepend","hide","trigger","complete","isProcessing","getQuery","getMenu","getFormElement","on","handler","one","off","Object","assign","handlers","set","addEventListener","window","timer","getInputElement","getContentElement","getElement","getInstance","el","Search","get","createInstances","selector","elements","document","body","querySelectorAll","forEach","item","createInsance","bootstrap","reinitialization"],"mappings":"AAAA,SACEA,gBADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,6BAJF,EAKEC,kBALF,EAMEC,2BANF,EAOEC,WAPF,EAQEC,gBARF,EASEC,QATF,QAUO,iBAVP;AAYA,SAAQC,aAAR,EAAuBC,kBAAvB,QAAgD,iBAAhD;AAiBA,MAAMC,oBAAoC,GAAG;AAC3CC,EAAAA,SAAS,EAAE,CADgC;AAC7B;AACdC,EAAAA,QAAQ,EAAE,IAFiC;AAE3B;AAChBC,EAAAA,KAAK,EAAE,IAHoC;AAG9B;AACbC,EAAAA,MAAM,EAAE,MAJmC;AAI3B;AAChBC,EAAAA,WAAW,EAAE,IAL8B,CAKxB;;AALwB,CAA7C;AAQA,MAAMC,oBAAoC,GAAG;AAC3CC,EAAAA,aAAa,EAAE,QAD4B;AAE3CC,EAAAA,aAAa,EAAE,kBAF4B;AAG3CC,EAAAA,SAAS,EAAE;AAHgC,CAA7C;;AAMA,MAAMC,eAAN,CAAsB;AAqBpBC,EAAAA,WAAW,CAACC,QAAD,EAAwBC,QAAxB,EAAkDC,QAAlD,EAA4E;AAAA,SApBvFC,OAoBuF;AAAA,SAnBvFC,cAmBuF;AAAA,SAlBvFC,WAkBuF;AAAA,SAjBvFC,YAiBuF;AAAA,SAhBvFC,cAgBuF;AAAA,SAfvFC,YAeuF;AAAA,SAdvFC,aAcuF;AAAA,SAbvFC,aAauF;AAAA,SAZvFC,cAYuF;AAAA,SAXvFC,cAWuF;AAAA,SAVvFC,iBAUuF;AAAA,SATvFC,YASuF;AAAA,SARvFtB,MAQuF;AAAA,SANvFuB,OAMuF;AAAA,SALvFC,OAKuF;AAAA,SAHvFC,UAGuF,GAHjE,KAGiE;AAAA,SAFvFC,UAEuF;;AAAA,SAmC/EC,WAnC+E,GAmChEC,IAAD,IAAkB;AACtC,aAAO,KAAKjB,OAAL,CAAakB,aAAb,CAA2B,8BAA8BD,IAA9B,GAAqC,IAAhE,CAAP;AACD,KArCsF;;AAAA,SAwC/EE,SAxC+E,GAwClEF,IAAD,IAAkB;AACpC,YAAMG,IAAI,GAAG,KAAKpB,OAAL,CAAaqB,YAAb,CAA2B,GAAE,KAAKR,OAAL,CAAanB,SAAU,GAAEuB,IAAK,EAA3D,CAAb;;AACA,UAAIG,IAAJ,EAAU;AACR,YAAIE,KAAK,GAAG7C,6BAA6B,CAAC2C,IAAD,CAAzC;;AAEA,YAAIE,KAAK,KAAK,IAAV,IAAkBC,MAAM,CAACD,KAAD,CAAN,KAAkB,MAAxC,EAAgD;AAC9C,iBAAO,IAAP;AACD,SAFD,MAEO,IAAIA,KAAK,KAAK,IAAV,IAAkBC,MAAM,CAACD,KAAD,CAAN,KAAkB,OAAxC,EAAiD;AACtD,iBAAO,KAAP;AACD;;AAED,eAAOA,KAAP;AACD,OAVD,MAUO;AACL,cAAME,UAAU,GAAG9C,kBAAkB,CAACuC,IAAD,CAArC;AAEA,cAAMQ,MAAM,GAAG9C,2BAA2B,CAAC,KAAKiC,OAAN,EAAeY,UAAf,CAA1C;;AACA,YAAIC,MAAJ,EAAY;AACV,iBAAOhD,6BAA6B,CAACgD,MAAD,CAApC;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF,KA9DsF;;AAAA,SAiE/EC,qBAjE+E,GAiEvD,MAAM;AACpC,YAAMC,UAAU,GAAG,KAAKR,SAAL,CAAe,YAAf,CAAnB;AACA,YAAMS,KAAK,GAAGhD,WAAW,GAAGgD,KAA5B;;AAEA,UAAI,CAACD,UAAL,EAAiB;AACf,eAAO,IAAP;AACD;;AAED,YAAME,UAAU,GAAGrD,aAAa,CAACmD,UAAD,CAAhC;AACA,UAAIG,aAAa,GAAG,CAAC,CAArB;;AACA,UAAI,CAACD,UAAL,EAAiB;AACfC,QAAAA,aAAa,GAAGC,QAAQ,CAACJ,UAAD,CAAxB;AACD,OAFD,MAEO;AACLG,QAAAA,aAAa,GAAG,CAACD,UAAjB;AACD;;AAED,UAAID,KAAK,GAAGE,aAAZ,EAA2B;AACzB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF,KAtFsF;;AAAA,SAyF/EE,KAzF+E,GAyFvE,MAAM;AACpB,WAAKhC,OAAL,CAAaiC,SAAb,CAAuBC,GAAvB,CAA2B,OAA3B;;AAEA,UACE,KAAKf,SAAL,CAAe,eAAf,MAAoC,IAApC,IACA,KAAKhB,YAAL,CAAkBmB,KAAlB,CAAwBa,MAAxB,IAAkC,KAAKvB,OAAL,CAAa1B,SAFjD,EAGE;AACA,aAAKkD,IAAL;AACD;AACF,KAlGsF;;AAAA,SAqG/EC,IArG+E,GAqGxE,MAAM;AACnB,WAAKrC,OAAL,CAAaiC,SAAb,CAAuBK,MAAvB,CAA8B,OAA9B;AACD,KAvGsF;;AAAA,SA0G/ElD,KA1G+E,GA0GtEmD,CAAD,IAAsB;AACpC,YAAMC,GAAG,GAAGD,CAAC,CAACE,QAAF,IAAcF,CAAC,CAACG,OAAhB,IAA2B,CAAvC;;AAEA,UAAIF,GAAG,KAAK,EAAZ,EAAgB;AACdD,QAAAA,CAAC,CAACI,cAAF;AAEA,aAAKC,MAAL;AACD;AACF,KAlHsF;;AAAA,SAqH/EC,KArH+E,GAqHvE,MAAM;AACpB,UAAI,KAAK1B,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,cAAMjC,SAAS,GAAG6C,QAAQ,CAAC,KAAKZ,SAAL,CAAe,YAAf,CAAD,CAA1B;;AAEA,YAAI,KAAKhB,YAAL,CAAkBmB,KAAlB,CAAwBa,MAAxB,IAAkCjD,SAAtC,EAAiD;AAC/C,eAAK0D,MAAL;AACD,SAFD,MAEO,IAAI,KAAKzC,YAAL,CAAkBmB,KAAlB,CAAwBa,MAAxB,KAAmC,CAAvC,EAA0C;AAC/C,eAAKW,KAAL;AACD;AACF;AACF,KA/HsF;;AAAA,SA+MhFC,MA/MgF,GA+MvE,MAAM;AACpB;AACA,UAAI,KAAK1D,MAAL,KAAgB,MAApB,EAA4B;AAC1B,YAAI2D,kBAAkB,GAAG,KAAKtB,qBAAL,EAAzB;;AAEA,YAAIsB,kBAAkB,KAAK,IAAvB,IAA+B,KAAK/C,cAAL,CAAoBgD,QAApB,CAA6B,KAAK/C,WAAlC,MAAmD,KAAtF,EAA6F;AAC3F,eAAKD,cAAL,CAAoBiD,OAApB,CAA4B,KAAKhD,WAAjC;AACA,eAAKA,WAAL,CAAiB+B,SAAjB,CAA2BK,MAA3B,CAAkC,QAAlC;AACD,SAHD,MAGO,IACLU,kBAAkB,KAAK,KAAvB,IACA,KAAK/C,cAAL,CAAoBgD,QAApB,CAA6B,KAAK/C,WAAlC,MAAmD,IAF9C,EAGL;AACA,eAAKF,OAAL,CAAakD,OAAb,CAAqB,KAAKhD,WAA1B;AACA,eAAKA,WAAL,CAAiB+B,SAAjB,CAA2BC,GAA3B,CAA+B,QAA/B;AACD;AACF;AACF,KA/NsF;;AAAA,SAkOhFE,IAlOgF,GAkOzE,MAAM;AAClB,UAAI,KAAKrB,UAAT,EAAqB;AACnB,aAAKgC,MAAL;AAEA,aAAKhC,UAAL,CAAgBqB,IAAhB,CAAqB,KAAKpC,OAA1B;AACD;AACF,KAxOsF;;AAAA,SA2OhFmD,IA3OgF,GA2OzE,MAAM;AAClB,UAAI,KAAKpC,UAAT,EAAqB;AACnB,aAAKgC,MAAL;AAEA,aAAKhC,UAAL,CAAgBoC,IAAhB,CAAqB,KAAKnD,OAA1B;AACD;AACF,KAjPsF;;AAAA,SAoPhF4C,MApPgF,GAoPvE,MAAM;AACpB,UAAI,KAAK9B,UAAL,KAAoB,KAAxB,EAA+B;AAC7B;AACA,YAAI,KAAKV,cAAT,EAAyB;AACvB,eAAKA,cAAL,CAAoB6B,SAApB,CAA8BK,MAA9B,CAAqC,QAArC;AACD,SAJ4B,CAM7B;;;AACA,YAAI,KAAKjC,YAAT,EAAuB;AACrB,eAAKA,YAAL,CAAkB4B,SAAlB,CAA4BC,GAA5B,CAAgC,QAAhC;AACD,SAT4B,CAW7B;;;AACA,YAAI,KAAK1B,cAAT,EAAyB;AACvB,eAAKA,cAAL,CAAoByB,SAApB,CAA8BC,GAA9B,CAAkC,QAAlC;AACD,SAd4B,CAgB7B;;;AACA,aAAK/B,YAAL,CAAkB6B,KAAlB;AAEA,aAAKlB,UAAL,GAAkB,IAAlB;AACAxC,QAAAA,gBAAgB,CAAC8E,OAAjB,CAAyB,KAAKpD,OAA9B,EAAuC,mBAAvC;AACD;AACF,KA3QsF;;AAAA,SA8QhFqD,QA9QgF,GA8QrE,MAAM;AACtB,UAAI,KAAKjD,cAAT,EAAyB;AACvB,aAAKA,cAAL,CAAoB6B,SAApB,CAA8BC,GAA9B,CAAkC,QAAlC;AACD,OAHqB,CAKtB;;;AACA,UAAI,KAAK7B,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkB4B,SAAlB,CAA4BK,MAA5B,CAAmC,QAAnC;AACD;;AAED,UAAI,KAAKnC,YAAL,CAAkBmB,KAAlB,CAAwBa,MAAxB,KAAmC,CAAvC,EAA0C;AACxC,aAAKW,KAAL;AACD,OAZqB,CActB;;;AACA,WAAK3C,YAAL,CAAkB6B,KAAlB;AAEA,WAAKI,IAAL;AAEA,WAAKtB,UAAL,GAAkB,KAAlB;AACD,KAlSsF;;AAAA,SAqShFgC,KArSgF,GAqSxE,MAAM;AACnB,UAAIxE,gBAAgB,CAAC8E,OAAjB,CAAyB,KAAKpD,OAA9B,EAAuC,iBAAvC,MAA8D,KAAlE,EAAyE;AACvE;AACD,OAHkB,CAKnB;;;AACA,WAAKG,YAAL,CAAkBmB,KAAlB,GAA0B,EAA1B;AACA,WAAKnB,YAAL,CAAkB6B,KAAlB,GAPmB,CASnB;;AACA,UAAI,KAAK3B,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkB4B,SAAlB,CAA4BC,GAA5B,CAAgC,QAAhC;AACD,OAZkB,CAcnB;;;AACA,UAAI,KAAK1B,cAAT,EAAyB;AACvB,aAAKA,cAAL,CAAoByB,SAApB,CAA8BK,MAA9B,CAAqC,QAArC;AACD,OAjBkB,CAmBnB;;;AACA,UAAI,KAAKnB,SAAL,CAAe,eAAf,MAAoC,KAAxC,EAA+C;AAC7C,aAAKgC,IAAL;AACD;;AAED7E,MAAAA,gBAAgB,CAAC8E,OAAjB,CAAyB,KAAKpD,OAA9B,EAAuC,mBAAvC;AACD,KA9TsF;;AAAA,SAgUhFsD,YAhUgF,GAgUjE,MAAM;AAC1B,aAAO,KAAKxC,UAAZ;AACD,KAlUsF;;AAAA,SAoUhFyC,QApUgF,GAoUrE,MAAM;AACtB,aAAO,KAAKpD,YAAL,CAAkBmB,KAAzB;AACD,KAtUsF;;AAAA,SAwUhFkC,OAxUgF,GAwUtE,MAAM;AACrB,aAAO,KAAKzC,UAAZ;AACD,KA1UsF;;AAAA,SA4UhF0C,cA5UgF,GA4U/D,MAAM;AAC5B,aAAO,KAAKvD,WAAZ;AACD,KA9UsF;;AAAA,SA6VhFwD,EA7VgF,GA6V3E,CAACzC,IAAD,EAAe0C,OAAf,KAAqC;AAC/C,aAAOrF,gBAAgB,CAACoF,EAAjB,CAAoB,KAAK1D,OAAzB,EAAkCiB,IAAlC,EAAwC0C,OAAxC,CAAP;AACD,KA/VsF;;AAAA,SAiWhFC,GAjWgF,GAiW1E,CAAC3C,IAAD,EAAe0C,OAAf,KAAqC;AAChD,aAAOrF,gBAAgB,CAACsF,GAAjB,CAAqB,KAAK5D,OAA1B,EAAmCiB,IAAnC,EAAyC0C,OAAzC,CAAP;AACD,KAnWsF;;AAAA,SAqWhFE,GArWgF,GAqWzE5C,IAAD,IAAkB;AAC7B,aAAO3C,gBAAgB,CAACuF,GAAjB,CAAqB,KAAK7D,OAA1B,EAAmCiB,IAAnC,CAAP;AACD,KAvWsF;;AACrF;AACA,SAAKL,OAAL,GAAekD,MAAM,CAACC,MAAP,CAAc9E,oBAAd,EAAoCa,QAApC,CAAf;AACA,SAAKe,OAAL,GAAed,QAAf,CAHqF,CAKrF;;AACA,SAAKC,OAAL,GAAeH,QAAf;AACA,SAAKI,cAAL,GAAsB,KAAKe,WAAL,CAAiB,SAAjB,CAAtB;AACA,SAAKd,WAAL,GAAmB,KAAKc,WAAL,CAAiB,MAAjB,CAAnB;AACA,SAAKb,YAAL,GAAoB,KAAKa,WAAL,CAAiB,OAAjB,CAApB;AACA,SAAKZ,cAAL,GAAsB,KAAKY,WAAL,CAAiB,SAAjB,CAAtB;AACA,SAAKX,YAAL,GAAoB,KAAKW,WAAL,CAAiB,OAAjB,CAApB;AACA,SAAKV,aAAL,GAAqB,KAAKU,WAAL,CAAiB,QAAjB,CAArB;AACA,SAAKT,aAAL,GAAqB,KAAKS,WAAL,CAAiB,QAAjB,CAArB;AACA,SAAKR,cAAL,GAAsB,KAAKQ,WAAL,CAAiB,SAAjB,CAAtB;AAEA,SAAKP,cAAL,GAAsB,KAAKO,WAAL,CAAiB,SAAjB,CAAtB;AACA,SAAKN,iBAAL,GAAyB,KAAKM,WAAL,CAAiB,YAAjB,CAAzB;AACA,SAAKL,YAAL,GAAoB,KAAKK,WAAL,CAAiB,OAAjB,CAApB,CAlBqF,CAoBrF;;AACA,SAAK3B,MAAL,GAAc,KAAK8B,SAAL,CAAe,QAAf,CAAd;;AACA,QAAI,KAAK9B,MAAL,KAAgB,MAApB,EAA4B;AAC1B,WAAK0B,UAAL,GAAkB,IAAIhC,aAAJ,CAAkB,KAAKkB,cAAvB,EAAuCjB,kBAAvC,CAAlB;AACD,KAxBoF,CA0BrF;;;AACA,SAAK+D,MAAL,GA3BqF,CA6BrF;;AACA,SAAKiB,QAAL;AAEAzF,IAAAA,QAAQ,CAAC0F,GAAT,CAAa,KAAKjE,OAAlB,EAA2B,KAAKa,OAAL,CAAarB,aAAxC,EAAuD,IAAvD;AACD;;AAgGOwE,EAAAA,QAAQ,GAAS;AACvB;AACA,SAAK7D,YAAL,CAAkB+D,gBAAlB,CAAmC,OAAnC,EAA4C,KAAKlC,KAAjD,EAFuB,CAIvB;;AACA,SAAK7B,YAAL,CAAkB+D,gBAAlB,CAAmC,MAAnC,EAA2C,KAAK7B,IAAhD,EALuB,CAOvB;;AACA,QAAI,KAAKlB,SAAL,CAAe,UAAf,MAA+B,IAAnC,EAAyC;AACvC,WAAKhB,YAAL,CAAkB+D,gBAAlB,CAAmC,OAAnC,EAA4C,KAAKrB,KAAjD;AACD,KAVsB,CAYvB;;;AACA,QAAI,KAAKtC,aAAT,EAAwB;AACtB,WAAKA,aAAL,CAAmB2D,gBAAnB,CAAoC,OAApC,EAA6C,KAAKtB,MAAlD;AACD,KAfsB,CAiBvB;;;AACA,QAAI,KAAKzB,SAAL,CAAe,OAAf,MAA4B,IAAhC,EAAsC;AACpC,WAAKhB,YAAL,CAAkB+D,gBAAlB,CAAmC,UAAnC,EAA+C,KAAK9E,KAApD;AACD,KApBsB,CAsBvB;;;AACA,QAAI,KAAKiB,YAAT,EAAuB;AACrB,WAAKA,YAAL,CAAkB6D,gBAAlB,CAAmC,OAAnC,EAA4C,KAAKpB,KAAjD;AACD,KAzBsB,CA2BvB;;;AACA,QAAI,KAAK/B,UAAT,EAAqB;AACnB;AACA,UAAI,KAAKT,aAAT,EAAwB;AACtB,aAAKA,aAAL,CAAmB4D,gBAAnB,CAAoC,OAApC,EAA6C,KAAK9B,IAAlD;AAEA,aAAKrB,UAAL,CAAgB2C,EAAhB,CAAmB,uBAAnB,EAA4C,YAAY;AACtD;AACA,cAAI7E,gBAAgB,CAAC,KAAKyB,aAAN,CAApB,EAA0C;AACxC;AACA,iBAAKA,aAAL,CAAmB2B,SAAnB,CAA6BC,GAA7B,CAAiC,QAAjC,EAFwC,CAGxC;;AACA,iBAAK5B,aAAL,CAAmB2B,SAAnB,CAA6BC,GAA7B,CAAiC,MAAjC;AACD;AACF,SARD;AAUA,aAAKnB,UAAL,CAAgB2C,EAAhB,CAAmB,uBAAnB,EAA4C,YAAY;AACtD;AACA,cAAI7E,gBAAgB,CAAC,KAAKyB,aAAN,CAApB,EAA0C;AACxC;AACA,iBAAKA,aAAL,CAAmB2B,SAAnB,CAA6BK,MAA7B,CAAoC,QAApC,EAFwC,CAGxC;;AACA,iBAAKhC,aAAL,CAAmB2B,SAAnB,CAA6BK,MAA7B,CAAoC,MAApC;AACD;AACF,SARD;AASD;;AAED,WAAKvB,UAAL,CAAgB2C,EAAhB,CAAmB,wBAAnB,EAA6C,YAAY;AACvD;AACA,aAAKvD,YAAL,CAAkB6B,KAAlB;AACD,OAHD;AAID,KA1DsB,CA4DvB;;;AACAmC,IAAAA,MAAM,CAACD,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACtC,UAAIE,KAAJ;AAEAtF,MAAAA,QAAQ,CACNsF,KADM,EAEN,MAAM;AACJ,aAAKrB,MAAL;AACD,OAJK,EAKN,GALM,CAAR;AAOD,KAVD;AAWD,GA9NmB,CAgOpB;AACA;AACA;AACA;;;AAkIOsB,EAAAA,eAAe,GAAqB;AACzC,WAAO,KAAKlE,YAAZ;AACD;;AAEMmE,EAAAA,iBAAiB,GAAgB;AACtC,WAAO,KAAKrE,cAAZ;AACD;;AAEMsE,EAAAA,UAAU,GAAgB;AAC/B,WAAO,KAAKvE,OAAZ;AACD,GA/WmB,CAiXpB;;;AAjXoB;;AAAhBL,e,CA+XU6E,W,GAAc,CAC1BC,EAD0B,EAE1BjF,aAAqB,GAAGD,oBAAoB,CAACC,aAFnB,KAGvB;AACH,QAAMkF,MAAM,GAAGnG,QAAQ,CAACoG,GAAT,CAAaF,EAAb,EAAiBjF,aAAjB,CAAf;;AACA,MAAIkF,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD;;AAED,SAAO,IAAP;AACD,C;;AAzYG/E,e,CA2YUiF,e,GAAkB,CAC9BC,QAAgB,GAAGtF,oBAAoB,CAACE,aADV,EAE9BmB,OAAuB,GAAG3B,oBAFI,EAG9B4B,OAAuB,GAAGtB,oBAHI,KAI3B;AACH,QAAMuF,QAAQ,GAAGC,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+BJ,QAA/B,CAAjB;AACAC,EAAAA,QAAQ,CAACI,OAAT,CAAkBT,EAAD,IAAQ;AACvB,UAAMU,IAAI,GAAGV,EAAb;AACA,QAAIC,MAAM,GAAG/E,eAAe,CAAC6E,WAAhB,CAA4BW,IAA5B,CAAb;;AACA,QAAI,CAACT,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG,IAAI/E,eAAJ,CAAoBwF,IAApB,EAA0BvE,OAA1B,EAAmCC,OAAnC,CAAT;AACD;AACF,GAND;AAOD,C;;AAxZGlB,e,CA0ZUyF,a,GAAgB,CAC5BP,QAAgB,GAAGtF,oBAAoB,CAACE,aADZ,EAE5BmB,OAAuB,GAAG3B,oBAFE,EAG5B4B,OAAuB,GAAGtB,oBAHE,KAII;AAChC,QAAMS,OAAO,GAAG+E,QAAQ,CAACC,IAAT,CAAc9D,aAAd,CAA4B2D,QAA5B,CAAhB;;AACA,MAAI,CAAC7E,OAAL,EAAc;AACZ;AACD;;AACD,QAAMmF,IAAI,GAAGnF,OAAb;AACA,MAAI0E,MAAM,GAAG/E,eAAe,CAAC6E,WAAhB,CAA4BW,IAA5B,CAAb;;AACA,MAAI,CAACT,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,IAAI/E,eAAJ,CAAoBwF,IAApB,EAA0BvE,OAA1B,EAAmCC,OAAnC,CAAT;AACD;;AACD,SAAO6D,MAAP;AACD,C;;AAzaG/E,e,CA2aU0F,S,GAAY,CAACR,QAAgB,GAAGtF,oBAAoB,CAACE,aAAzC,KAA2D;AACnFE,EAAAA,eAAe,CAACiF,eAAhB,CAAgCC,QAAhC;AACD,C;;AA7aGlF,e,CA+aU2F,gB,GAAmB,CAACT,QAAgB,GAAGtF,oBAAoB,CAACE,aAAzC,KAA2D;AAC1FE,EAAAA,eAAe,CAACiF,eAAhB,CAAgCC,QAAhC;AACD,C;;AAEH,SAAQlF,eAAR,EAAyBV,oBAAzB,EAA+CM,oBAA/C","sourcesContent":["import {\r\n  EventHandlerUtil,\r\n  DataUtil,\r\n  getBreakpoint,\r\n  getAttributeValueByBreakpoint,\r\n  stringSnakeToCamel,\r\n  getObjectPropertyValueByKey,\r\n  getViewPort,\r\n  isVisibleElement,\r\n  throttle,\r\n} from '../_utils/index'\r\n\r\nimport {MenuComponent, defaultMenuOptions} from './MenuComponent'\r\n\r\nexport interface ISearchOptions {\r\n  minLength: number // Miniam text lenght to query search\r\n  keypress: boolean // Enable search on keypress\r\n  enter: boolean // Enable search on enter key press\r\n  layout: 'menu' | 'inline' // Use 'menu' or 'inline' layout options to display search results\r\n  responsive?: number // Pass integer value or bootstrap compatible breakpoint key(sm,md,lg,xl,xxl) to enable reponsive form mode for device width below the breakpoint value\r\n  showOnFocus: boolean // Always show menu on input focus\r\n}\r\n\r\nexport interface ISearchQueries {\r\n  componentName: string\r\n  instanseQuery: string\r\n  attrQuery: string\r\n}\r\n\r\nconst defaultSearchOptions: ISearchOptions = {\r\n  minLength: 2, // Miniam text lenght to query search\r\n  keypress: true, // Enable search on keypress\r\n  enter: true, // Enable search on enter key press\r\n  layout: 'menu', // Use 'menu' or 'inline' layout options to display search results\r\n  showOnFocus: true, // Always show menu on input focus\r\n}\r\n\r\nconst defaultSearchQueires: ISearchQueries = {\r\n  componentName: 'search',\r\n  instanseQuery: '[data-kt-search]',\r\n  attrQuery: 'data-kt-search-',\r\n}\r\n\r\nclass SearchComponent {\r\n  element: HTMLElement\r\n  contentElement: HTMLElement\r\n  formElement: HTMLFormElement\r\n  inputElement: HTMLInputElement\r\n  spinnerElement: HTMLElement\r\n  clearElement: HTMLElement\r\n  toggleElement: HTMLElement\r\n  submitElement: HTMLElement\r\n  toolbarElement: HTMLElement\r\n  resultsElement: HTMLElement\r\n  suggestionElement: HTMLElement\r\n  emptyElement: HTMLElement\r\n  layout: any\r\n\r\n  options: ISearchOptions\r\n  queries: ISearchQueries\r\n\r\n  processing: boolean = false\r\n  menuObject: MenuComponent | undefined\r\n\r\n  constructor(_element: HTMLElement, _options: ISearchOptions, _queries: ISearchQueries) {\r\n    // Variables\r\n    this.options = Object.assign(defaultSearchOptions, _options)\r\n    this.queries = _queries\r\n\r\n    // Elements\r\n    this.element = _element\r\n    this.contentElement = this._getElement('content') as HTMLElement\r\n    this.formElement = this._getElement('form') as HTMLFormElement\r\n    this.inputElement = this._getElement('input') as HTMLInputElement\r\n    this.spinnerElement = this._getElement('spinner') as HTMLElement\r\n    this.clearElement = this._getElement('clear') as HTMLElement\r\n    this.toggleElement = this._getElement('toggle') as HTMLElement\r\n    this.submitElement = this._getElement('submit') as HTMLElement\r\n    this.toolbarElement = this._getElement('toolbar') as HTMLElement\r\n\r\n    this.resultsElement = this._getElement('results') as HTMLElement\r\n    this.suggestionElement = this._getElement('suggestion') as HTMLElement\r\n    this.emptyElement = this._getElement('empty') as HTMLElement\r\n\r\n    // Layout\r\n    this.layout = this.getOption('layout')\r\n    if (this.layout === 'menu') {\r\n      this.menuObject = new MenuComponent(this.contentElement, defaultMenuOptions)\r\n    }\r\n\r\n    // Update\r\n    this.update()\r\n\r\n    // Event Handlers\r\n    this.handlers()\r\n\r\n    DataUtil.set(this.element, this.queries.componentName, this)\r\n  }\r\n\r\n  private _getElement = (name: string) => {\r\n    return this.element.querySelector('[data-kt-search-element=\"' + name + '\"]')\r\n  }\r\n\r\n  // Get option\r\n  private getOption = (name: string) => {\r\n    const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`)\r\n    if (attr) {\r\n      let value = getAttributeValueByBreakpoint(attr)\r\n\r\n      if (value !== null && String(value) === 'true') {\r\n        return true\r\n      } else if (value !== null && String(value) === 'false') {\r\n        return false\r\n      }\r\n\r\n      return value\r\n    } else {\r\n      const optionName = stringSnakeToCamel(name)\r\n\r\n      const option = getObjectPropertyValueByKey(this.options, optionName)\r\n      if (option) {\r\n        return getAttributeValueByBreakpoint(option)\r\n      } else {\r\n        return null\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check if responsive form mode is enabled\r\n  private getResponsiveFormMode = () => {\r\n    const responsive = this.getOption('responsive') as string\r\n    const width = getViewPort().width\r\n\r\n    if (!responsive) {\r\n      return null\r\n    }\r\n\r\n    const breakpoint = getBreakpoint(responsive)\r\n    let breakPointNum = -1\r\n    if (!breakpoint) {\r\n      breakPointNum = parseInt(responsive)\r\n    } else {\r\n      breakPointNum = +breakpoint\r\n    }\r\n\r\n    if (width < breakPointNum) {\r\n      return 'on'\r\n    } else {\r\n      return 'off'\r\n    }\r\n  }\r\n\r\n  // Focus\r\n  private focus = () => {\r\n    this.element.classList.add('focus')\r\n\r\n    if (\r\n      this.getOption('show-on-focus') === true ||\r\n      this.inputElement.value.length >= this.options.minLength\r\n    ) {\r\n      this.show()\r\n    }\r\n  }\r\n\r\n  // Blur\r\n  private blur = () => {\r\n    this.element.classList.remove('focus')\r\n  }\r\n\r\n  // Enter\r\n  private enter = (e: KeyboardEvent) => {\r\n    const key = e.charCode || e.keyCode || 0\r\n\r\n    if (key === 13) {\r\n      e.preventDefault()\r\n\r\n      this.search()\r\n    }\r\n  }\r\n\r\n  // Input\r\n  private input = () => {\r\n    if (this.getOption('min-length')) {\r\n      const minLength = parseInt(this.getOption('min-length') as string)\r\n\r\n      if (this.inputElement.value.length >= minLength) {\r\n        this.search()\r\n      } else if (this.inputElement.value.length === 0) {\r\n        this.clear()\r\n      }\r\n    }\r\n  }\r\n\r\n  private handlers(): void {\r\n    // Focus\r\n    this.inputElement.addEventListener('focus', this.focus)\r\n\r\n    // Blur\r\n    this.inputElement.addEventListener('blur', this.blur)\r\n\r\n    // Keypress\r\n    if (this.getOption('keypress') === true) {\r\n      this.inputElement.addEventListener('input', this.input)\r\n    }\r\n\r\n    // Submit\r\n    if (this.submitElement) {\r\n      this.submitElement.addEventListener('click', this.search)\r\n    }\r\n\r\n    // Enter\r\n    if (this.getOption('enter') === true) {\r\n      this.inputElement.addEventListener('keypress', this.enter)\r\n    }\r\n\r\n    // Clear\r\n    if (this.clearElement) {\r\n      this.clearElement.addEventListener('click', this.clear)\r\n    }\r\n\r\n    // Menu\r\n    if (this.menuObject) {\r\n      // Toggle menu\r\n      if (this.toggleElement) {\r\n        this.toggleElement.addEventListener('click', this.show)\r\n\r\n        this.menuObject.on('kt.menu.dropdown.show', function () {\r\n          // @ts-ignore\r\n          if (isVisibleElement(this.toggleElement)) {\r\n            // @ts-ignore\r\n            this.toggleElement.classList.add('active')\r\n            // @ts-ignore\r\n            this.toggleElement.classList.add('show')\r\n          }\r\n        })\r\n\r\n        this.menuObject.on('kt.menu.dropdown.hide', function () {\r\n          // @ts-ignore\r\n          if (isVisibleElement(this.toggleElement)) {\r\n            // @ts-ignore\r\n            this.toggleElement.classList.remove('active')\r\n            // @ts-ignore\r\n            this.toggleElement.classList.remove('show')\r\n          }\r\n        })\r\n      }\r\n\r\n      this.menuObject.on('kt.menu.dropdown.shown', function () {\r\n        // @ts-ignore\r\n        this.inputElement.focus()\r\n      })\r\n    }\r\n\r\n    // Window resize handling\r\n    window.addEventListener('resize', () => {\r\n      let timer\r\n\r\n      throttle(\r\n        timer,\r\n        () => {\r\n          this.update()\r\n        },\r\n        200\r\n      )\r\n    })\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n  // Update\r\n  public update = () => {\r\n    // Handle responsive form\r\n    if (this.layout === 'menu') {\r\n      let responsiveFormMode = this.getResponsiveFormMode()\r\n\r\n      if (responsiveFormMode === 'on' && this.contentElement.contains(this.formElement) === false) {\r\n        this.contentElement.prepend(this.formElement)\r\n        this.formElement.classList.remove('d-none')\r\n      } else if (\r\n        responsiveFormMode === 'off' &&\r\n        this.contentElement.contains(this.formElement) === true\r\n      ) {\r\n        this.element.prepend(this.formElement)\r\n        this.formElement.classList.add('d-none')\r\n      }\r\n    }\r\n  }\r\n\r\n  // Show menu\r\n  public show = () => {\r\n    if (this.menuObject) {\r\n      this.update()\r\n\r\n      this.menuObject.show(this.element)\r\n    }\r\n  }\r\n\r\n  // Hide menu\r\n  public hide = () => {\r\n    if (this.menuObject) {\r\n      this.update()\r\n\r\n      this.menuObject.hide(this.element)\r\n    }\r\n  }\r\n\r\n  // Search\r\n  public search = () => {\r\n    if (this.processing === false) {\r\n      // Show search spinner\r\n      if (this.spinnerElement) {\r\n        this.spinnerElement.classList.remove('d-none')\r\n      }\r\n\r\n      // Hide search clear button\r\n      if (this.clearElement) {\r\n        this.clearElement.classList.add('d-none')\r\n      }\r\n\r\n      // Hide search toolbar\r\n      if (this.toolbarElement) {\r\n        this.toolbarElement.classList.add('d-none')\r\n      }\r\n\r\n      // Focus input\r\n      this.inputElement.focus()\r\n\r\n      this.processing = true\r\n      EventHandlerUtil.trigger(this.element, 'kt.search.process')\r\n    }\r\n  }\r\n\r\n  // Complete\r\n  public complete = () => {\r\n    if (this.spinnerElement) {\r\n      this.spinnerElement.classList.add('d-none')\r\n    }\r\n\r\n    // Show search toolbar\r\n    if (this.clearElement) {\r\n      this.clearElement.classList.remove('d-none')\r\n    }\r\n\r\n    if (this.inputElement.value.length === 0) {\r\n      this.clear()\r\n    }\r\n\r\n    // Focus input\r\n    this.inputElement.focus()\r\n\r\n    this.show()\r\n\r\n    this.processing = false\r\n  }\r\n\r\n  // Clear\r\n  public clear = () => {\r\n    if (EventHandlerUtil.trigger(this.element, 'kt.search.clear') === false) {\r\n      return\r\n    }\r\n\r\n    // Clear and focus input\r\n    this.inputElement.value = ''\r\n    this.inputElement.focus()\r\n\r\n    // Hide clear icon\r\n    if (this.clearElement) {\r\n      this.clearElement.classList.add('d-none')\r\n    }\r\n\r\n    // Show search toolbar\r\n    if (this.toolbarElement) {\r\n      this.toolbarElement.classList.remove('d-none')\r\n    }\r\n\r\n    // Hide menu\r\n    if (this.getOption('show-on-focus') === false) {\r\n      this.hide()\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.search.cleared')\r\n  }\r\n\r\n  public isProcessing = () => {\r\n    return this.processing\r\n  }\r\n\r\n  public getQuery = () => {\r\n    return this.inputElement.value\r\n  }\r\n\r\n  public getMenu = () => {\r\n    return this.menuObject\r\n  }\r\n\r\n  public getFormElement = () => {\r\n    return this.formElement\r\n  }\r\n\r\n  public getInputElement(): HTMLInputElement {\r\n    return this.inputElement\r\n  }\r\n\r\n  public getContentElement(): HTMLElement {\r\n    return this.contentElement\r\n  }\r\n\r\n  public getElement(): HTMLElement {\r\n    return this.element\r\n  }\r\n\r\n  // Event API\r\n  public on = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.on(this.element, name, handler)\r\n  }\r\n\r\n  public one = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.one(this.element, name, handler)\r\n  }\r\n\r\n  public off = (name: string) => {\r\n    return EventHandlerUtil.off(this.element, name)\r\n  }\r\n\r\n  // Static methods\r\n  public static getInstance = (\r\n    el: HTMLElement,\r\n    componentName: string = defaultSearchQueires.componentName\r\n  ) => {\r\n    const Search = DataUtil.get(el, componentName)\r\n    if (Search) {\r\n      return Search\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static createInstances = (\r\n    selector: string = defaultSearchQueires.instanseQuery,\r\n    options: ISearchOptions = defaultSearchOptions,\r\n    queries: ISearchQueries = defaultSearchQueires\r\n  ) => {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((el) => {\r\n      const item = el as HTMLElement\r\n      let Search = SearchComponent.getInstance(item)\r\n      if (!Search) {\r\n        Search = new SearchComponent(item, options, queries)\r\n      }\r\n    })\r\n  }\r\n\r\n  public static createInsance = (\r\n    selector: string = defaultSearchQueires.instanseQuery,\r\n    options: ISearchOptions = defaultSearchOptions,\r\n    queries: ISearchQueries = defaultSearchQueires\r\n  ): SearchComponent | undefined => {\r\n    const element = document.body.querySelector(selector)\r\n    if (!element) {\r\n      return\r\n    }\r\n    const item = element as HTMLElement\r\n    let Search = SearchComponent.getInstance(item)\r\n    if (!Search) {\r\n      Search = new SearchComponent(item, options, queries)\r\n    }\r\n    return Search\r\n  }\r\n\r\n  public static bootstrap = (selector: string = defaultSearchQueires.instanseQuery) => {\r\n    SearchComponent.createInstances(selector)\r\n  }\r\n\r\n  public static reinitialization = (selector: string = defaultSearchQueires.instanseQuery) => {\r\n    SearchComponent.createInstances(selector)\r\n  }\r\n}\r\nexport {SearchComponent, defaultSearchOptions, defaultSearchQueires}\r\n"]},"metadata":{},"sourceType":"module"}