{"ast":null,"code":"import { getScrollTop, getAttributeValueByBreakpoint, throttle, getObjectPropertyValueByKey, stringSnakeToCamel, getUniqueIdWithPrefix, DataUtil, ElementAnimateUtil } from '../_utils/index';\nconst defaultScrollTopOptions = {\n  offset: 200,\n  speed: 600\n};\n\nclass ScrollTopComponent {\n  constructor(_element, options) {\n    this.element = void 0;\n    this.options = void 0;\n    this.instanceUid = void 0;\n\n    this._handlers = () => {\n      let timer;\n      window.addEventListener('scroll', () => {\n        throttle(timer, () => {\n          this._scroll();\n        });\n      });\n      this.element.addEventListener('click', e => {\n        e.preventDefault();\n\n        this._go();\n      });\n    };\n\n    this._scroll = () => {\n      const offset = parseInt(this._getOption('offset'));\n      const pos = getScrollTop(); // current vertical position\n\n      if (pos > offset) {\n        if (!document.body.hasAttribute('data-kt-scrolltop')) {\n          document.body.setAttribute('data-kt-scrolltop', 'on');\n        }\n      } else {\n        if (document.body.hasAttribute('data-kt-scrolltop')) {\n          document.body.removeAttribute('data-kt-scrolltop');\n        }\n      }\n    };\n\n    this._go = () => {\n      const speed = parseInt(this._getOption('speed'));\n      ElementAnimateUtil.scrollTop(0, speed);\n    };\n\n    this._getOption = name => {\n      const attr = this.element.getAttribute(`data-kt-scrolltop-${name}`);\n\n      if (attr) {\n        const value = getAttributeValueByBreakpoint(attr);\n        return value !== null && String(value) === 'true';\n      }\n\n      const optionName = stringSnakeToCamel(name);\n      const option = getObjectPropertyValueByKey(this.options, optionName);\n\n      if (option) {\n        return getAttributeValueByBreakpoint(option);\n      }\n\n      return null;\n    };\n\n    this.go = () => {\n      return this._go();\n    };\n\n    this.getElement = () => {\n      return this.element;\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultScrollTopOptions, options);\n    this.instanceUid = getUniqueIdWithPrefix('scrolltop'); // Event Handlers\n\n    this._handlers(); // Bind Instance\n\n\n    DataUtil.set(this.element, 'scrolltop', this);\n  }\n\n}\n\nScrollTopComponent.getInstance = el => {\n  const scrollTop = DataUtil.get(el, 'scrolltop');\n\n  if (scrollTop) {\n    return scrollTop;\n  }\n\n  return null;\n};\n\nScrollTopComponent.createInstances = selector => {\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let scrollTop = ScrollTopComponent.getInstance(item);\n\n    if (!scrollTop) {\n      scrollTop = new ScrollTopComponent(item, defaultScrollTopOptions);\n    }\n  });\n};\n\nScrollTopComponent.createInsance = (selector, options = defaultScrollTopOptions) => {\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let scrollTop = ScrollTopComponent.getInstance(item);\n\n  if (!scrollTop) {\n    scrollTop = new ScrollTopComponent(item, options);\n  }\n\n  return scrollTop;\n};\n\nScrollTopComponent.bootstrap = () => {\n  ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]');\n};\n\nScrollTopComponent.reinitialization = () => {\n  ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]');\n};\n\nScrollTopComponent.goTop = () => {\n  ElementAnimateUtil.scrollTop(0, defaultScrollTopOptions.speed);\n};\n\nexport { ScrollTopComponent, defaultScrollTopOptions };","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/assets/ts/components/_ScrollTopComponent.ts"],"names":["getScrollTop","getAttributeValueByBreakpoint","throttle","getObjectPropertyValueByKey","stringSnakeToCamel","getUniqueIdWithPrefix","DataUtil","ElementAnimateUtil","defaultScrollTopOptions","offset","speed","ScrollTopComponent","constructor","_element","options","element","instanceUid","_handlers","timer","window","addEventListener","_scroll","e","preventDefault","_go","parseInt","_getOption","pos","document","body","hasAttribute","setAttribute","removeAttribute","scrollTop","name","attr","getAttribute","value","String","optionName","option","go","getElement","Object","assign","set","getInstance","el","get","createInstances","selector","elements","querySelectorAll","forEach","item","createInsance","querySelector","bootstrap","reinitialization","goTop"],"mappings":"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","sourcesContent":["import {\r\n  getScrollTop,\r\n  getAttributeValueByBreakpoint,\r\n  throttle,\r\n  getObjectPropertyValueByKey,\r\n  stringSnakeToCamel,\r\n  getUniqueIdWithPrefix,\r\n  DataUtil,\r\n  ElementAnimateUtil,\r\n} from '../_utils/index'\r\n\r\nexport interface IScrollTopOptions {\r\n  offset: number\r\n  speed: number\r\n}\r\n\r\nconst defaultScrollTopOptions: IScrollTopOptions = {\r\n  offset: 200,\r\n  speed: 600,\r\n}\r\n\r\nclass ScrollTopComponent {\r\n  element: HTMLElement\r\n  options: IScrollTopOptions\r\n  instanceUid: string\r\n\r\n  constructor(_element: HTMLElement, options: IScrollTopOptions) {\r\n    this.element = _element\r\n    this.options = Object.assign(defaultScrollTopOptions, options)\r\n    this.instanceUid = getUniqueIdWithPrefix('scrolltop')\r\n\r\n    // Event Handlers\r\n    this._handlers()\r\n\r\n    // Bind Instance\r\n    DataUtil.set(this.element, 'scrolltop', this)\r\n  }\r\n\r\n  private _handlers = () => {\r\n    let timer: number\r\n    window.addEventListener('scroll', () => {\r\n      throttle(timer, () => {\r\n        this._scroll()\r\n      })\r\n    })\r\n\r\n    this.element.addEventListener('click', (e: Event) => {\r\n      e.preventDefault()\r\n      this._go()\r\n    })\r\n  }\r\n\r\n  private _scroll = () => {\r\n    const offset = parseInt(this._getOption('offset') as string)\r\n    const pos = getScrollTop() // current vertical position\r\n    if (pos > offset) {\r\n      if (!document.body.hasAttribute('data-kt-scrolltop')) {\r\n        document.body.setAttribute('data-kt-scrolltop', 'on')\r\n      }\r\n    } else {\r\n      if (document.body.hasAttribute('data-kt-scrolltop')) {\r\n        document.body.removeAttribute('data-kt-scrolltop')\r\n      }\r\n    }\r\n  }\r\n\r\n  private _go = () => {\r\n    const speed = parseInt(this._getOption('speed') as string)\r\n    ElementAnimateUtil.scrollTop(0, speed)\r\n  }\r\n\r\n  private _getOption = (name: string) => {\r\n    const attr = this.element.getAttribute(`data-kt-scrolltop-${name}`)\r\n    if (attr) {\r\n      const value = getAttributeValueByBreakpoint(attr)\r\n      return value !== null && String(value) === 'true'\r\n    }\r\n\r\n    const optionName = stringSnakeToCamel(name)\r\n    const option = getObjectPropertyValueByKey(this.options, optionName)\r\n    if (option) {\r\n      return getAttributeValueByBreakpoint(option)\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n\r\n  // Plugin API\r\n  public go = () => {\r\n    return this._go()\r\n  }\r\n\r\n  public getElement = () => {\r\n    return this.element\r\n  }\r\n\r\n  // Static methods\r\n  public static getInstance = (el: HTMLElement) => {\r\n    const scrollTop = DataUtil.get(el, 'scrolltop')\r\n    if (scrollTop) {\r\n      return scrollTop\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static createInstances = (selector: string) => {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((el) => {\r\n      const item = el as HTMLElement\r\n      let scrollTop = ScrollTopComponent.getInstance(item)\r\n      if (!scrollTop) {\r\n        scrollTop = new ScrollTopComponent(item, defaultScrollTopOptions)\r\n      }\r\n    })\r\n  }\r\n\r\n  public static createInsance = (\r\n    selector: string,\r\n    options: IScrollTopOptions = defaultScrollTopOptions\r\n  ): ScrollTopComponent | undefined => {\r\n    const element = document.body.querySelector(selector)\r\n    if (!element) {\r\n      return\r\n    }\r\n    const item = element as HTMLElement\r\n    let scrollTop = ScrollTopComponent.getInstance(item)\r\n    if (!scrollTop) {\r\n      scrollTop = new ScrollTopComponent(item, options)\r\n    }\r\n    return scrollTop\r\n  }\r\n\r\n  public static bootstrap = () => {\r\n    ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]')\r\n  }\r\n\r\n  public static reinitialization = () => {\r\n    ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]')\r\n  }\r\n\r\n  public static goTop = () => {\r\n    ElementAnimateUtil.scrollTop(0, defaultScrollTopOptions.speed)\r\n  }\r\n}\r\nexport {ScrollTopComponent, defaultScrollTopOptions}\r\n"]},"metadata":{},"sourceType":"module"}