{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PartitionRelativeTimePattern = void 0;\n\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\n\nvar SingularRelativeTimeUnit_1 = require(\"./SingularRelativeTimeUnit\");\n\nvar MakePartsList_1 = require(\"./MakePartsList\");\n\nfunction PartitionRelativeTimePattern(rtf, value, unit, _a) {\n  var getInternalSlots = _a.getInternalSlots;\n  ecma402_abstract_1.invariant(ecma402_abstract_1.Type(value) === 'Number', \"value must be number, instead got \" + typeof value, TypeError);\n  ecma402_abstract_1.invariant(ecma402_abstract_1.Type(unit) === 'String', \"unit must be number, instead got \" + typeof value, TypeError);\n\n  if (isNaN(value) || !isFinite(value)) {\n    throw new RangeError(\"Invalid value \" + value);\n  }\n\n  var resolvedUnit = SingularRelativeTimeUnit_1.SingularRelativeTimeUnit(unit);\n\n  var _b = getInternalSlots(rtf),\n      fields = _b.fields,\n      style = _b.style,\n      numeric = _b.numeric,\n      pluralRules = _b.pluralRules,\n      numberFormat = _b.numberFormat;\n\n  var entry = resolvedUnit;\n\n  if (style === 'short') {\n    entry = resolvedUnit + \"-short\";\n  } else if (style === 'narrow') {\n    entry = resolvedUnit + \"-narrow\";\n  }\n\n  if (!(entry in fields)) {\n    entry = resolvedUnit;\n  }\n\n  var patterns = fields[entry];\n\n  if (numeric === 'auto') {\n    if (ecma402_abstract_1.ToString(value) in patterns) {\n      return [{\n        type: 'literal',\n        value: patterns[ecma402_abstract_1.ToString(value)]\n      }];\n    }\n  }\n\n  var tl = 'future';\n\n  if (ecma402_abstract_1.SameValue(value, -0) || value < 0) {\n    tl = 'past';\n  }\n\n  var po = patterns[tl];\n  var fv = typeof numberFormat.formatToParts === 'function' ? numberFormat.formatToParts(Math.abs(value)) : // TODO: If formatToParts is not supported, we assume the whole formatted\n  // number is a part\n  [{\n    type: 'literal',\n    value: numberFormat.format(Math.abs(value)),\n    unit: unit\n  }];\n  var pr = pluralRules.select(value);\n  var pattern = po[pr];\n  return MakePartsList_1.MakePartsList(pattern, resolvedUnit, fv);\n}\n\nexports.PartitionRelativeTimePattern = PartitionRelativeTimePattern;","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/node_modules/@formatjs/intl-relativetimeformat/abstract/PartitionRelativeTimePattern.js"],"names":["Object","defineProperty","exports","value","PartitionRelativeTimePattern","ecma402_abstract_1","require","SingularRelativeTimeUnit_1","MakePartsList_1","rtf","unit","_a","getInternalSlots","invariant","Type","TypeError","isNaN","isFinite","RangeError","resolvedUnit","SingularRelativeTimeUnit","_b","fields","style","numeric","pluralRules","numberFormat","entry","patterns","ToString","type","tl","SameValue","po","fv","formatToParts","Math","abs","format","pr","select","pattern","MakePartsList"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionRelativeTimePattern = void 0;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar SingularRelativeTimeUnit_1 = require(\"./SingularRelativeTimeUnit\");\nvar MakePartsList_1 = require(\"./MakePartsList\");\nfunction PartitionRelativeTimePattern(rtf, value, unit, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    ecma402_abstract_1.invariant(ecma402_abstract_1.Type(value) === 'Number', \"value must be number, instead got \" + typeof value, TypeError);\n    ecma402_abstract_1.invariant(ecma402_abstract_1.Type(unit) === 'String', \"unit must be number, instead got \" + typeof value, TypeError);\n    if (isNaN(value) || !isFinite(value)) {\n        throw new RangeError(\"Invalid value \" + value);\n    }\n    var resolvedUnit = SingularRelativeTimeUnit_1.SingularRelativeTimeUnit(unit);\n    var _b = getInternalSlots(rtf), fields = _b.fields, style = _b.style, numeric = _b.numeric, pluralRules = _b.pluralRules, numberFormat = _b.numberFormat;\n    var entry = resolvedUnit;\n    if (style === 'short') {\n        entry = resolvedUnit + \"-short\";\n    }\n    else if (style === 'narrow') {\n        entry = resolvedUnit + \"-narrow\";\n    }\n    if (!(entry in fields)) {\n        entry = resolvedUnit;\n    }\n    var patterns = fields[entry];\n    if (numeric === 'auto') {\n        if (ecma402_abstract_1.ToString(value) in patterns) {\n            return [\n                {\n                    type: 'literal',\n                    value: patterns[ecma402_abstract_1.ToString(value)],\n                },\n            ];\n        }\n    }\n    var tl = 'future';\n    if (ecma402_abstract_1.SameValue(value, -0) || value < 0) {\n        tl = 'past';\n    }\n    var po = patterns[tl];\n    var fv = typeof numberFormat.formatToParts === 'function'\n        ? numberFormat.formatToParts(Math.abs(value))\n        : // TODO: If formatToParts is not supported, we assume the whole formatted\n            // number is a part\n            [\n                {\n                    type: 'literal',\n                    value: numberFormat.format(Math.abs(value)),\n                    unit: unit,\n                },\n            ];\n    var pr = pluralRules.select(value);\n    var pattern = po[pr];\n    return MakePartsList_1.MakePartsList(pattern, resolvedUnit, fv);\n}\nexports.PartitionRelativeTimePattern = PartitionRelativeTimePattern;\n"]},"metadata":{},"sourceType":"script"}