{"ast":null,"code":"import { DataUtil, getUniqueIdWithPrefix, EventHandlerUtil } from '../_utils/index'; // Helpers\n\nimport { CookieComponent } from './_CookieComponent';\nconst defaultToggleOptions = {\n  saveState: false\n};\n\nclass ToggleComponent {\n  constructor(_element, options) {\n    this.element = void 0;\n    this.instanceUid = void 0;\n    this.options = void 0;\n    this.state = '';\n    this.target = null;\n    this.attribute = '';\n\n    this._handlers = () => {\n      this.element.addEventListener('click', e => {\n        e.preventDefault();\n\n        this._toggle();\n      });\n    };\n\n    this._toggle = () => {\n      // Trigger \"after.toggle\" event\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.change');\n\n      if (this._isEnabled()) {\n        this._disable();\n      } else {\n        this._enable();\n      } // Trigger \"before.toggle\" event\n\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.changed');\n      return this;\n    };\n\n    this._enable = () => {\n      var _this$target;\n\n      if (this._isEnabled()) {\n        return;\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.enable');\n      (_this$target = this.target) === null || _this$target === void 0 ? void 0 : _this$target.setAttribute(this.attribute, 'on');\n\n      if (this.state.length > 0) {\n        this.element.classList.add(this.state);\n      }\n\n      if (this.options.saveState) {\n        CookieComponent.set(this.attribute, 'on', {});\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.enabled');\n      return this;\n    };\n\n    this._disable = () => {\n      var _this$target2;\n\n      if (!this._isEnabled()) {\n        return false;\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.disable');\n      (_this$target2 = this.target) === null || _this$target2 === void 0 ? void 0 : _this$target2.removeAttribute(this.attribute);\n\n      if (this.state.length > 0) {\n        this.element.classList.remove(this.state);\n      }\n\n      if (this.options.saveState) {\n        CookieComponent.delete(this.attribute);\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.disabled');\n      return this;\n    };\n\n    this._isEnabled = () => {\n      if (!this.target) {\n        return false;\n      }\n\n      return String(this.target.getAttribute(this.attribute)).toLowerCase() === 'on';\n    };\n\n    this.toggle = () => {\n      return this._toggle();\n    };\n\n    this.enable = () => {\n      return this._enable();\n    };\n\n    this.disable = () => {\n      return this._disable();\n    };\n\n    this.isEnabled = () => {\n      return this._isEnabled();\n    };\n\n    this.goElement = () => {\n      return this.element;\n    };\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = name => {\n      return EventHandlerUtil.off(this.element, name);\n    };\n\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n\n    this.options = Object.assign(defaultToggleOptions, options);\n    this.instanceUid = getUniqueIdWithPrefix('toggle');\n    this.element = _element;\n    const elementTargetAttr = this.element.getAttribute('data-kt-toggle-target');\n\n    if (elementTargetAttr) {\n      this.target = document.querySelector(elementTargetAttr);\n    }\n\n    const elementToggleAttr = this.element.getAttribute('data-kt-toggle-state');\n    this.state = elementToggleAttr || '';\n    this.attribute = 'data-kt-' + this.element.getAttribute('data-kt-toggle-name'); // Event Handlers\n\n    this._handlers(); // Update Instance\n    // Bind Instance\n\n\n    DataUtil.set(this.element, 'toggle', this);\n  }\n\n}\n\nToggleComponent.getInstance = el => {\n  const toggleElement = DataUtil.get(el, 'toggle');\n\n  if (toggleElement) {\n    return toggleElement;\n  }\n\n  return null;\n};\n\nToggleComponent.createInstances = selector => {\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let toggleElement = ToggleComponent.getInstance(item);\n\n    if (!toggleElement) {\n      toggleElement = new ToggleComponent(item, defaultToggleOptions);\n    }\n  });\n};\n\nToggleComponent.createInsance = (selector, options = defaultToggleOptions) => {\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let toggle = ToggleComponent.getInstance(item);\n\n  if (!toggle) {\n    toggle = new ToggleComponent(item, options);\n  }\n\n  return toggle;\n};\n\nToggleComponent.reinitialization = () => {\n  ToggleComponent.createInstances('[data-kt-toggle]');\n};\n\nToggleComponent.bootstrap = () => {\n  ToggleComponent.createInstances('[data-kt-toggle]');\n};\n\nexport { ToggleComponent, defaultToggleOptions };","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/assets/ts/components/_ToggleComponent.ts"],"names":["DataUtil","getUniqueIdWithPrefix","EventHandlerUtil","CookieComponent","defaultToggleOptions","saveState","ToggleComponent","constructor","_element","options","element","instanceUid","state","target","attribute","_handlers","addEventListener","e","preventDefault","_toggle","trigger","_isEnabled","_disable","_enable","setAttribute","length","classList","add","set","removeAttribute","remove","delete","String","getAttribute","toLowerCase","toggle","enable","disable","isEnabled","goElement","on","name","handler","one","off","event","Object","assign","elementTargetAttr","document","querySelector","elementToggleAttr","getInstance","el","toggleElement","get","createInstances","selector","elements","body","querySelectorAll","forEach","item","createInsance","reinitialization","bootstrap"],"mappings":"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","sourcesContent":["import {DataUtil, getUniqueIdWithPrefix, EventHandlerUtil} from '../_utils/index'\r\n// Helpers\r\nimport {CookieComponent} from './_CookieComponent'\r\n\r\nexport interface ToggleOptions {\r\n  saveState: boolean\r\n  targetState?: string\r\n  toggleState?: string\r\n  targetToggleMode?: string\r\n}\r\n\r\nconst defaultToggleOptions: ToggleOptions = {\r\n  saveState: false,\r\n}\r\n\r\nclass ToggleComponent {\r\n  element: HTMLElement\r\n  instanceUid: string\r\n  options: ToggleOptions\r\n  state: string = ''\r\n  target: HTMLElement | null = null\r\n  attribute: string = ''\r\n\r\n  constructor(_element: HTMLElement, options: ToggleOptions) {\r\n    this.options = Object.assign(defaultToggleOptions, options)\r\n    this.instanceUid = getUniqueIdWithPrefix('toggle')\r\n    this.element = _element\r\n\r\n    const elementTargetAttr = this.element.getAttribute('data-kt-toggle-target')\r\n    if (elementTargetAttr) {\r\n      this.target = document.querySelector(elementTargetAttr)\r\n    }\r\n    const elementToggleAttr = this.element.getAttribute('data-kt-toggle-state')\r\n    this.state = elementToggleAttr || ''\r\n    this.attribute = 'data-kt-' + this.element.getAttribute('data-kt-toggle-name')\r\n\r\n    // Event Handlers\r\n    this._handlers()\r\n\r\n    // Update Instance\r\n    // Bind Instance\r\n    DataUtil.set(this.element, 'toggle', this)\r\n  }\r\n\r\n  private _handlers = () => {\r\n    this.element.addEventListener('click', (e: Event) => {\r\n      e.preventDefault()\r\n      this._toggle()\r\n    })\r\n  }\r\n\r\n  // Event handlers\r\n  private _toggle = () => {\r\n    // Trigger \"after.toggle\" event\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.change')\r\n\r\n    if (this._isEnabled()) {\r\n      this._disable()\r\n    } else {\r\n      this._enable()\r\n    }\r\n\r\n    // Trigger \"before.toggle\" event\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.changed')\r\n    return this\r\n  }\r\n\r\n  private _enable = () => {\r\n    if (this._isEnabled()) {\r\n      return\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.enable')\r\n    this.target?.setAttribute(this.attribute, 'on')\r\n    if (this.state.length > 0) {\r\n      this.element.classList.add(this.state)\r\n    }\r\n\r\n    if (this.options.saveState) {\r\n      CookieComponent.set(this.attribute, 'on', {})\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.enabled')\r\n    return this\r\n  }\r\n\r\n  private _disable = () => {\r\n    if (!this._isEnabled()) {\r\n      return false\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.disable')\r\n    this.target?.removeAttribute(this.attribute)\r\n\r\n    if (this.state.length > 0) {\r\n      this.element.classList.remove(this.state)\r\n    }\r\n\r\n    if (this.options.saveState) {\r\n      CookieComponent.delete(this.attribute)\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.disabled')\r\n    return this\r\n  }\r\n\r\n  private _isEnabled = () => {\r\n    if (!this.target) {\r\n      return false\r\n    }\r\n\r\n    return String(this.target.getAttribute(this.attribute)).toLowerCase() === 'on'\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n\r\n  // Plugin API\r\n  // Plugin API\r\n  public toggle = () => {\r\n    return this._toggle()\r\n  }\r\n\r\n  public enable = () => {\r\n    return this._enable()\r\n  }\r\n\r\n  public disable = () => {\r\n    return this._disable()\r\n  }\r\n\r\n  public isEnabled = () => {\r\n    return this._isEnabled()\r\n  }\r\n\r\n  public goElement = () => {\r\n    return this.element\r\n  }\r\n\r\n  // Event API\r\n  public on = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.on(this.element, name, handler)\r\n  }\r\n\r\n  public one = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.one(this.element, name, handler)\r\n  }\r\n\r\n  public off = (name: string) => {\r\n    return EventHandlerUtil.off(this.element, name)\r\n  }\r\n\r\n  public trigger = (name: string, event?: Event) => {\r\n    return EventHandlerUtil.trigger(this.element, name, event)\r\n  }\r\n\r\n  // Static methods\r\n  public static getInstance = (el: HTMLElement) => {\r\n    const toggleElement = DataUtil.get(el, 'toggle')\r\n    if (toggleElement) {\r\n      return toggleElement\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static createInstances = (selector: string) => {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((el) => {\r\n      const item = el as HTMLElement\r\n      let toggleElement = ToggleComponent.getInstance(item)\r\n      if (!toggleElement) {\r\n        toggleElement = new ToggleComponent(item, defaultToggleOptions)\r\n      }\r\n    })\r\n  }\r\n\r\n  public static createInsance = (\r\n    selector: string,\r\n    options: ToggleOptions = defaultToggleOptions\r\n  ): ToggleComponent | undefined => {\r\n    const element = document.body.querySelector(selector)\r\n    if (!element) {\r\n      return\r\n    }\r\n    const item = element as HTMLElement\r\n    let toggle = ToggleComponent.getInstance(item)\r\n    if (!toggle) {\r\n      toggle = new ToggleComponent(item, options)\r\n    }\r\n    return toggle\r\n  }\r\n\r\n  public static reinitialization = () => {\r\n    ToggleComponent.createInstances('[data-kt-toggle]')\r\n  }\r\n\r\n  public static bootstrap = () => {\r\n    ToggleComponent.createInstances('[data-kt-toggle]')\r\n  }\r\n}\r\n\r\nexport {ToggleComponent, defaultToggleOptions}\r\n"]},"metadata":{},"sourceType":"module"}