{"ast":null,"code":"var _jsxFileName = \"/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/layout/core/LayoutProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { DefaultLayoutConfig } from './DefaultLayoutConfig';\nimport { getEmptyCssClasses, getEmptyCSSVariables, getEmptyHTMLAttributes, LayoutSetup } from './LayoutSetup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LayoutContext = /*#__PURE__*/createContext({\n  config: DefaultLayoutConfig,\n  classes: getEmptyCssClasses(),\n  attributes: getEmptyHTMLAttributes(),\n  cssVariables: getEmptyCSSVariables(),\n  setLayout: config => {}\n});\n\nconst enableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'flex');\n  }\n};\n\nconst disableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'none');\n  }\n};\n\nconst LayoutProvider = ({\n  children\n}) => {\n  _s();\n\n  const [config, setConfig] = useState(LayoutSetup.config);\n  const [classes, setClasses] = useState(LayoutSetup.classes);\n  const [attributes, setAttributes] = useState(LayoutSetup.attributes);\n  const [cssVariables, setCSSVariables] = useState(LayoutSetup.cssVariables);\n\n  const setLayout = _themeConfig => {\n    enableSplashScreen();\n    const bodyClasses = Array.from(document.body.classList);\n    bodyClasses.forEach(cl => document.body.classList.remove(cl));\n    LayoutSetup.updatePartialConfig(_themeConfig);\n    setConfig(Object.assign({}, LayoutSetup.config));\n    setClasses(LayoutSetup.classes);\n    setAttributes(LayoutSetup.attributes);\n    setCSSVariables(LayoutSetup.cssVariables);\n    setTimeout(() => {\n      disableSplashScreen();\n    }, 500);\n  };\n\n  const value = {\n    config,\n    classes,\n    attributes,\n    cssVariables,\n    setLayout\n  };\n  useEffect(() => {\n    disableSplashScreen();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LayoutContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n\n_s(LayoutProvider, \"v9W/VJPDsgTcdQRHrWCbNvCfFmk=\");\n\n_c = LayoutProvider;\nexport { LayoutContext, LayoutProvider };\nexport function useLayout() {\n  _s2();\n\n  return useContext(LayoutContext);\n}\n\n_s2(useLayout, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutProvider\");","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/layout/core/LayoutProvider.tsx"],"names":["React","createContext","useContext","useState","useEffect","DefaultLayoutConfig","getEmptyCssClasses","getEmptyCSSVariables","getEmptyHTMLAttributes","LayoutSetup","LayoutContext","config","classes","attributes","cssVariables","setLayout","enableSplashScreen","splashScreen","document","getElementById","style","setProperty","disableSplashScreen","LayoutProvider","children","setConfig","setClasses","setAttributes","setCSSVariables","_themeConfig","bodyClasses","Array","from","body","classList","forEach","cl","remove","updatePartialConfig","Object","assign","setTimeout","value","useLayout"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,EAA0CC,QAA1C,EAAoDC,SAApD,QAAoE,OAApE;AACA,SAAQC,mBAAR,QAAkC,uBAAlC;AACA,SACEC,kBADF,EAEEC,oBAFF,EAGEC,sBAHF,EAIEC,WAJF,QAKO,eALP;;AAqBA,MAAMC,aAAa,gBAAGT,aAAa,CAAqB;AACtDU,EAAAA,MAAM,EAAEN,mBAD8C;AAEtDO,EAAAA,OAAO,EAAEN,kBAAkB,EAF2B;AAGtDO,EAAAA,UAAU,EAAEL,sBAAsB,EAHoB;AAItDM,EAAAA,YAAY,EAAEP,oBAAoB,EAJoB;AAKtDQ,EAAAA,SAAS,EAAGJ,MAAD,IAAyB,CAAE;AALgB,CAArB,CAAnC;;AAQA,MAAMK,kBAAkB,GAAG,MAAM;AAC/B,QAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAArB;;AACA,MAAIF,YAAJ,EAAkB;AAChBA,IAAAA,YAAY,CAACG,KAAb,CAAmBC,WAAnB,CAA+B,SAA/B,EAA0C,MAA1C;AACD;AACF,CALD;;AAOA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAML,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAArB;;AACA,MAAIF,YAAJ,EAAkB;AAChBA,IAAAA,YAAY,CAACG,KAAb,CAAmBC,WAAnB,CAA+B,SAA/B,EAA0C,MAA1C;AACD;AACF,CALD;;AAOA,MAAME,cAAwB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAC/C,QAAM,CAACb,MAAD,EAASc,SAAT,IAAsBtB,QAAQ,CAACM,WAAW,CAACE,MAAb,CAApC;AACA,QAAM,CAACC,OAAD,EAAUc,UAAV,IAAwBvB,QAAQ,CAACM,WAAW,CAACG,OAAb,CAAtC;AACA,QAAM,CAACC,UAAD,EAAac,aAAb,IAA8BxB,QAAQ,CAACM,WAAW,CAACI,UAAb,CAA5C;AACA,QAAM,CAACC,YAAD,EAAec,eAAf,IAAkCzB,QAAQ,CAACM,WAAW,CAACK,YAAb,CAAhD;;AACA,QAAMC,SAAS,GAAIc,YAAD,IAAoC;AACpDb,IAAAA,kBAAkB;AAClB,UAAMc,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWd,QAAQ,CAACe,IAAT,CAAcC,SAAzB,CAApB;AACAJ,IAAAA,WAAW,CAACK,OAAZ,CAAqBC,EAAD,IAAQlB,QAAQ,CAACe,IAAT,CAAcC,SAAd,CAAwBG,MAAxB,CAA+BD,EAA/B,CAA5B;AACA3B,IAAAA,WAAW,CAAC6B,mBAAZ,CAAgCT,YAAhC;AACAJ,IAAAA,SAAS,CAACc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB/B,WAAW,CAACE,MAA9B,CAAD,CAAT;AACAe,IAAAA,UAAU,CAACjB,WAAW,CAACG,OAAb,CAAV;AACAe,IAAAA,aAAa,CAAClB,WAAW,CAACI,UAAb,CAAb;AACAe,IAAAA,eAAe,CAACnB,WAAW,CAACK,YAAb,CAAf;AACA2B,IAAAA,UAAU,CAAC,MAAM;AACfnB,MAAAA,mBAAmB;AACpB,KAFS,EAEP,GAFO,CAAV;AAGD,GAZD;;AAaA,QAAMoB,KAAyB,GAAG;AAChC/B,IAAAA,MADgC;AAEhCC,IAAAA,OAFgC;AAGhCC,IAAAA,UAHgC;AAIhCC,IAAAA,YAJgC;AAKhCC,IAAAA;AALgC,GAAlC;AAQAX,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBAAO,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEoB,KAA/B;AAAA,cAAuClB;AAAvC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA/BD;;GAAMD,c;;KAAAA,c;AAiCN,SAAQb,aAAR,EAAuBa,cAAvB;AAEA,OAAO,SAASoB,SAAT,GAAqB;AAAA;;AAC1B,SAAOzC,UAAU,CAACQ,aAAD,CAAjB;AACD;;IAFeiC,S","sourcesContent":["import React, {createContext, useContext, useState, useEffect} from 'react'\r\nimport {DefaultLayoutConfig} from './DefaultLayoutConfig'\r\nimport {\r\n  getEmptyCssClasses,\r\n  getEmptyCSSVariables,\r\n  getEmptyHTMLAttributes,\r\n  LayoutSetup,\r\n} from './LayoutSetup'\r\nimport {\r\n  ILayout,\r\n  ILayoutCSSVariables,\r\n  ILayoutCSSClasses,\r\n  ILayoutHTMLAttributes,\r\n} from './LayoutModels'\r\n\r\nexport interface LayoutContextModel {\r\n  config: ILayout\r\n  classes: ILayoutCSSClasses\r\n  attributes: ILayoutHTMLAttributes\r\n  cssVariables: ILayoutCSSVariables\r\n  setLayout: (config: LayoutSetup) => void\r\n}\r\n\r\nconst LayoutContext = createContext<LayoutContextModel>({\r\n  config: DefaultLayoutConfig,\r\n  classes: getEmptyCssClasses(),\r\n  attributes: getEmptyHTMLAttributes(),\r\n  cssVariables: getEmptyCSSVariables(),\r\n  setLayout: (config: LayoutSetup) => {},\r\n})\r\n\r\nconst enableSplashScreen = () => {\r\n  const splashScreen = document.getElementById('splash-screen')\r\n  if (splashScreen) {\r\n    splashScreen.style.setProperty('display', 'flex')\r\n  }\r\n}\r\n\r\nconst disableSplashScreen = () => {\r\n  const splashScreen = document.getElementById('splash-screen')\r\n  if (splashScreen) {\r\n    splashScreen.style.setProperty('display', 'none')\r\n  }\r\n}\r\n\r\nconst LayoutProvider: React.FC = ({children}) => {\r\n  const [config, setConfig] = useState(LayoutSetup.config)\r\n  const [classes, setClasses] = useState(LayoutSetup.classes)\r\n  const [attributes, setAttributes] = useState(LayoutSetup.attributes)\r\n  const [cssVariables, setCSSVariables] = useState(LayoutSetup.cssVariables)\r\n  const setLayout = (_themeConfig: Partial<ILayout>) => {\r\n    enableSplashScreen()\r\n    const bodyClasses = Array.from(document.body.classList)\r\n    bodyClasses.forEach((cl) => document.body.classList.remove(cl))\r\n    LayoutSetup.updatePartialConfig(_themeConfig)\r\n    setConfig(Object.assign({}, LayoutSetup.config))\r\n    setClasses(LayoutSetup.classes)\r\n    setAttributes(LayoutSetup.attributes)\r\n    setCSSVariables(LayoutSetup.cssVariables)\r\n    setTimeout(() => {\r\n      disableSplashScreen()\r\n    }, 500)\r\n  }\r\n  const value: LayoutContextModel = {\r\n    config,\r\n    classes,\r\n    attributes,\r\n    cssVariables,\r\n    setLayout,\r\n  }\r\n\r\n  useEffect(() => {\r\n    disableSplashScreen()\r\n  }, [])\r\n\r\n  return <LayoutContext.Provider value={value}>{children}</LayoutContext.Provider>\r\n}\r\n\r\nexport {LayoutContext, LayoutProvider}\r\n\r\nexport function useLayout() {\r\n  return useContext(LayoutContext)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}