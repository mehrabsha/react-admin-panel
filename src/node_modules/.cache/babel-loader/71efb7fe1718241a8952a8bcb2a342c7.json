{"ast":null,"code":"var _jsxFileName = \"/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/app/modules/auth/redux/AuthInit.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from 'react';\nimport { shallowEqual, useSelector, connect, useDispatch } from 'react-redux';\nimport { LayoutSplashScreen } from '../../../../_metronic/layout/core';\nimport * as auth from './AuthRedux';\nimport { getUserByToken } from './AuthCRUD';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst mapState = state => ({\n  auth: state.auth\n});\n\nconst connector = connect(mapState, auth.actions);\n\nconst AuthInit = props => {\n  _s();\n\n  const didRequest = useRef(false);\n  const dispatch = useDispatch();\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\n  const accessToken = useSelector(({\n    auth\n  }) => auth.accessToken, shallowEqual); // We should request user by authToken before rendering the application\n\n  useEffect(() => {\n    const requestUser = async () => {\n      try {\n        if (!didRequest.current) {\n          const {\n            data: user\n          } = await getUserByToken();\n          dispatch(props.fulfillUser(user));\n        }\n      } catch (error) {\n        console.error(error);\n\n        if (!didRequest.current) {\n          dispatch(props.logout());\n        }\n      } finally {\n        setShowSplashScreen(false);\n      }\n\n      return () => didRequest.current = true;\n    };\n\n    if (accessToken) {\n      requestUser();\n    } else {\n      dispatch(props.logout());\n      setShowSplashScreen(false);\n    } // eslint-disable-next-line\n\n  }, []);\n  return showSplashScreen ? /*#__PURE__*/_jsxDEV(LayoutSplashScreen, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 29\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.children\n  }, void 0, false);\n};\n\n_s(AuthInit, \"QZZ6ZvjLpFInhk9rFw5xQoMZLJU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AuthInit;\nexport default _c2 = connector(AuthInit);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthInit\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/app/modules/auth/redux/AuthInit.tsx"],"names":["useRef","useEffect","useState","shallowEqual","useSelector","connect","useDispatch","LayoutSplashScreen","auth","getUserByToken","mapState","state","connector","actions","AuthInit","props","didRequest","dispatch","showSplashScreen","setShowSplashScreen","accessToken","requestUser","current","data","user","fulfillUser","error","console","logout","children"],"mappings":";;;AAAA,SAAYA,MAAZ,EAAoBC,SAApB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,SAAQC,YAAR,EAAsBC,WAAtB,EAAmCC,OAAnC,EAA4CC,WAA5C,QAA8E,aAA9E;AACA,SAAQC,kBAAR,QAAiC,mCAAjC;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;AACA,SAAQC,cAAR,QAA6B,YAA7B;;;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,KAAuB;AAACH,EAAAA,IAAI,EAAEG,KAAK,CAACH;AAAb,CAAvB,CAAjB;;AACA,MAAMI,SAAS,GAAGP,OAAO,CAACK,QAAD,EAAWF,IAAI,CAACK,OAAhB,CAAzB;;AAGA,MAAMC,QAA4B,GAAIC,KAAD,IAAW;AAAA;;AAC9C,QAAMC,UAAU,GAAGhB,MAAM,CAAC,KAAD,CAAzB;AACA,QAAMiB,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0CjB,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAMkB,WAAW,GAAGhB,WAAW,CAAY,CAAC;AAACI,IAAAA;AAAD,GAAD,KAAYA,IAAI,CAACY,WAA7B,EAA0CjB,YAA1C,CAA/B,CAJ8C,CAM9C;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,WAAW,GAAG,YAAY;AAC9B,UAAI;AACF,YAAI,CAACL,UAAU,CAACM,OAAhB,EAAyB;AACvB,gBAAM;AAACC,YAAAA,IAAI,EAAEC;AAAP,cAAe,MAAMf,cAAc,EAAzC;AACAQ,UAAAA,QAAQ,CAACF,KAAK,CAACU,WAAN,CAAkBD,IAAlB,CAAD,CAAR;AACD;AACF,OALD,CAKE,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;;AACA,YAAI,CAACV,UAAU,CAACM,OAAhB,EAAyB;AACvBL,UAAAA,QAAQ,CAACF,KAAK,CAACa,MAAN,EAAD,CAAR;AACD;AACF,OAVD,SAUU;AACRT,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD;;AAED,aAAO,MAAOH,UAAU,CAACM,OAAX,GAAqB,IAAnC;AACD,KAhBD;;AAkBA,QAAIF,WAAJ,EAAiB;AACfC,MAAAA,WAAW;AACZ,KAFD,MAEO;AACLJ,MAAAA,QAAQ,CAACF,KAAK,CAACa,MAAN,EAAD,CAAR;AACAT,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,KAxBa,CAyBd;;AACD,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,SAAOD,gBAAgB,gBAAG,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,UAAH,gBAA4B;AAAA,cAAGH,KAAK,CAACc;AAAT,mBAAnD;AACD,CApCD;;GAAMf,Q;UAEaR,W,EAEGF,W;;;KAJhBU,Q;AAsCN,qBAAeF,SAAS,CAACE,QAAD,CAAxB","sourcesContent":["import {FC, useRef, useEffect, useState} from 'react'\r\nimport {shallowEqual, useSelector, connect, useDispatch, ConnectedProps} from 'react-redux'\r\nimport {LayoutSplashScreen} from '../../../../_metronic/layout/core'\r\nimport * as auth from './AuthRedux'\r\nimport {getUserByToken} from './AuthCRUD'\r\nimport {RootState} from '../../../../setup'\r\n\r\nconst mapState = (state: RootState) => ({auth: state.auth})\r\nconst connector = connect(mapState, auth.actions)\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\nconst AuthInit: FC<PropsFromRedux> = (props) => {\r\n  const didRequest = useRef(false)\r\n  const dispatch = useDispatch()\r\n  const [showSplashScreen, setShowSplashScreen] = useState(true)\r\n  const accessToken = useSelector<RootState>(({auth}) => auth.accessToken, shallowEqual)\r\n\r\n  // We should request user by authToken before rendering the application\r\n  useEffect(() => {\r\n    const requestUser = async () => {\r\n      try {\r\n        if (!didRequest.current) {\r\n          const {data: user} = await getUserByToken()\r\n          dispatch(props.fulfillUser(user))\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        if (!didRequest.current) {\r\n          dispatch(props.logout())\r\n        }\r\n      } finally {\r\n        setShowSplashScreen(false)\r\n      }\r\n\r\n      return () => (didRequest.current = true)\r\n    }\r\n\r\n    if (accessToken) {\r\n      requestUser()\r\n    } else {\r\n      dispatch(props.logout())\r\n      setShowSplashScreen(false)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return showSplashScreen ? <LayoutSplashScreen /> : <>{props.children}</>\r\n}\r\n\r\nexport default connector(AuthInit)\r\n"]},"metadata":{},"sourceType":"module"}