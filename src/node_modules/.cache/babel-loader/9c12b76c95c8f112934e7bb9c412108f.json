{"ast":null,"code":"/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\nvar Prism = function () {\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function (o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function (obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function (o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\n       * Insert a token before another token in a language literal\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n       * we cannot just provide an object, we need anobject and a key.\n       * @param inside The key (or language id) of the parent\n       * @param before The key to insert before. If not provided, the function appends instead.\n       * @param insert Object with the key/value pairs to insert\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function (o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run(\"before-tokenize\", env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run(\"after-tokenize\", env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n\n            if (delNum != 1) {\n              _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            }\n\n            if (oneshot) {\n              break;\n            }\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function () {},\n      run: function (name, env) {}\n    },\n    tokenize: function (text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp(\"\\\\$\" + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp(\"(\\\\{)\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\2)[^\\\\`$])*\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }],\n    'environment': {\n      pattern: RegExp(\"\\\\$?\" + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'function': /[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, Prism.languages.c['string']],\n      'comment': Prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: Prism.languages.c\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:true|false)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'operator', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(Prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,\n        lookbehind: true,\n        inside: {\n          'attr-value': {\n            pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n            inside: {\n              'style': {\n                pattern: /([\"'])[\\s\\S]+(?=[\"']$)/,\n                lookbehind: true,\n                alias: 'language-css',\n                inside: Prism.languages.css\n              },\n              'punctuation': [{\n                pattern: /^=/,\n                alias: 'attr-equals'\n              }, /\"|'/]\n            }\n          },\n          'attr-name': /^style/i\n        }\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+\\b)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#(?:[\\da-f]{1,2}){3,4}\\b/i,\n      alias: 'color'\n    },\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(Prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-flags': /[a-z]+$/,\n      'regex-delimiter': /^\\/|\\/$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ;else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|for|finally|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === \"diff\") {\n      alias.push(\"bold\");\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(Prism);\n/* \"prismjs/components/prism-git\" */\n\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: Prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n              walkTokens(token.content);\n            }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nPrism.languages.json = {\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nPrism.languages.webmanifest = Prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'font-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // `code`\n      // ``code``\n      pattern: /``.+?``|`[^`\\r\\n]+`/,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      // reverse Prism.util.encode\n      var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(code, grammar, codeLang);\n    }\n  });\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);\n/* \"prismjs/components/prism-objectivec\" */\n\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\nPrism.languages.objc = Prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'important'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'function'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'variable'\n  },\n  'module': {\n    pattern: /\\b[A-Z]\\w+/,\n    alias: 'variable'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /[(){}\\[\\]|.,:;]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/im,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|with|show|hide)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /url\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n    'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);\n\nexport default Prism;","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/node_modules/prism-react-renderer/prism/index.js"],"names":["Prism","uniqueId","_","util","encode","tokens","Token","type","content","alias","map","replace","o","Object","prototype","toString","call","match","objId","obj","defineProperty","value","clone","visited","key","hasOwnProperty","forEach","v","i","languages","extend","id","redef","lang","insertBefore","inside","before","insert","root","grammar","arguments","length","newToken","ret","token","DFS","callback","plugins","highlight","text","language","env","code","hooks","run","tokenize","stringify","matchGrammar","strarr","index","startPos","oneshot","target","patterns","j","pattern","lookbehind","greedy","lookbehindLength","global","flags","RegExp","source","pos","str","lastIndex","exec","from","to","k","p","len","delNum","slice","after","args","push","wrapped","Array","splice","apply","add","name","rest","matchedStr","parent","element","join","tag","classes","attributes","aliases","keys","markup","addInlined","tagName","includedCdataInside","def","html","mathml","svg","xml","ssml","atom","rss","envVars","commandAfterHeredoc","insideString","bash","variable","toBeCopied","shell","clike","c","keyword","cpp","string","css","selectorInside","selector","unit","number","javascript","regex","js","jsx","stringifyToken","walkTokens","openedTags","notTagNorBrace","pop","openedBraces","plainText","withId","unshift","maybeClassNameTokens","comment","interpolation","coffeescript","coffee","diff","PREFIXES","prefix","test","git","go","graphql","markdown","getPlaceholder","toUpperCase","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","placeholder","indexOf","tokenizePlaceholders","t","s","substring","middle","replacement","concat","handlebars","punctuation","handlebarsPattern","json","webmanifest","less","makefile","inner","createInline","tableCell","tableRow","tableLine","yaml","l","codeLang","codeBlock","toLowerCase","cls","autoloader","Date","valueOf","Math","floor","random","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","objectivec","objc","ocaml","python","py","reason","function","sass","atrule","operator","important","property","scss","sql","stylus","func","typescript","typeInside","ts","tsx","wasm","anchorOrAlias","properties","plainKey","createValuePattern","yml"],"mappings":"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","sourcesContent":["/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\nvar Prism = function () {\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function (o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function (obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function (o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\n       * Insert a token before another token in a language literal\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n       * we cannot just provide an object, we need anobject and a key.\n       * @param inside The key (or language id) of the parent\n       * @param before The key to insert before. If not provided, the function appends instead.\n       * @param insert Object with the key/value pairs to insert\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function (o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run(\"before-tokenize\", env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run(\"after-tokenize\", env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n\n            if (delNum != 1) {\n              _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            }\n\n            if (oneshot) {\n              break;\n            }\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function () {},\n      run: function (name, env) {}\n    },\n    tokenize: function (text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp(\"\\\\$\" + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp(\"(\\\\{)\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\2)[^\\\\`$])*\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }],\n    'environment': {\n      pattern: RegExp(\"\\\\$?\" + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'function': /[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, Prism.languages.c['string']],\n      'comment': Prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: Prism.languages.c\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:true|false)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'operator', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(Prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /(^|[\"'\\s])style\\s*=\\s*(?:\"[^\"]*\"|'[^']*')/i,\n        lookbehind: true,\n        inside: {\n          'attr-value': {\n            pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n            inside: {\n              'style': {\n                pattern: /([\"'])[\\s\\S]+(?=[\"']$)/,\n                lookbehind: true,\n                alias: 'language-css',\n                inside: Prism.languages.css\n              },\n              'punctuation': [{\n                pattern: /^=/,\n                alias: 'attr-equals'\n              }, /\"|'/]\n            }\n          },\n          'attr-name': /^style/i\n        }\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+\\b)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#(?:[\\da-f]{1,2}){3,4}\\b/i,\n      alias: 'color'\n    },\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(Prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\\s*[\\[$\\w\\xA0-\\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-flags': /[a-z]+$/,\n      'regex-delimiter': /^\\/|\\/$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|for|finally|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === \"diff\") {\n      alias.push(\"bold\");\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(Prism);\n/* \"prismjs/components/prism-git\" */\n\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: Prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nPrism.languages.json = {\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nPrism.languages.webmanifest = Prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'font-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // `code`\n      // ``code``\n      pattern: /``.+?``|`[^`\\r\\n]+`/,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      // reverse Prism.util.encode\n      var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(code, grammar, codeLang);\n    }\n  });\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);\n/* \"prismjs/components/prism-objectivec\" */\n\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\nPrism.languages.objc = Prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'important'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'function'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'variable'\n  },\n  'module': {\n    pattern: /\\b[A-Z]\\w+/,\n    alias: 'variable'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /[(){}\\[\\]|.,:;]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/im,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|forward|for|each|while|import|use|extend|debug|warn|mixin|include|function|return|content)\\b/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|with|show|hide)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /url\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n    'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);\n\nexport default Prism;\n"]},"metadata":{},"sourceType":"module"}