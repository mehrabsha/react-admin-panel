{"ast":null,"code":"import { BestAvailableLocale } from './BestAvailableLocale';\nimport { UNICODE_EXTENSION_SEQUENCE_REGEX } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-bestfitmatcher\n * @param availableLocales\n * @param requestedLocales\n * @param getDefaultLocale\n */\n\nexport function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {\n  var minimizedAvailableLocaleMap = {};\n  var minimizedAvailableLocales = new Set();\n  availableLocales.forEach(function (locale) {\n    var minimizedLocale = new Intl.Locale(locale).minimize().toString();\n    minimizedAvailableLocaleMap[minimizedLocale] = locale;\n    minimizedAvailableLocales.add(minimizedLocale);\n  });\n  var foundLocale;\n\n  for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n    var l = requestedLocales_1[_i];\n\n    if (foundLocale) {\n      break;\n    }\n\n    var noExtensionLocale = l.replace(UNICODE_EXTENSION_SEQUENCE_REGEX, '');\n\n    if (availableLocales.has(noExtensionLocale)) {\n      foundLocale = noExtensionLocale;\n      break;\n    }\n\n    if (minimizedAvailableLocales.has(noExtensionLocale)) {\n      foundLocale = minimizedAvailableLocaleMap[noExtensionLocale];\n      break;\n    }\n\n    var locale = new Intl.Locale(noExtensionLocale);\n    var maximizedRequestedLocale = locale.maximize().toString();\n    var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale\n\n    if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {\n      foundLocale = minimizedAvailableLocaleMap[minimizedRequestedLocale];\n      break;\n    } // Lookup algo on maximized locale\n\n\n    foundLocale = BestAvailableLocale(minimizedAvailableLocales, maximizedRequestedLocale);\n  }\n\n  return {\n    locale: foundLocale || getDefaultLocale()\n  };\n}","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/node_modules/@formatjs/ecma402-abstract/lib/BestFitMatcher.js"],"names":["BestAvailableLocale","UNICODE_EXTENSION_SEQUENCE_REGEX","BestFitMatcher","availableLocales","requestedLocales","getDefaultLocale","minimizedAvailableLocaleMap","minimizedAvailableLocales","Set","forEach","locale","minimizedLocale","Intl","Locale","minimize","toString","add","foundLocale","_i","requestedLocales_1","length","l","noExtensionLocale","replace","has","maximizedRequestedLocale","maximize","minimizedRequestedLocale"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,uBAApC;AACA,SAASC,gCAAT,QAAiD,SAAjD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,gBAAxB,EAA0CC,gBAA1C,EAA4DC,gBAA5D,EAA8E;AACjF,MAAIC,2BAA2B,GAAG,EAAlC;AACA,MAAIC,yBAAyB,GAAG,IAAIC,GAAJ,EAAhC;AACAL,EAAAA,gBAAgB,CAACM,OAAjB,CAAyB,UAAUC,MAAV,EAAkB;AACvC,QAAIC,eAAe,GAAG,IAAIC,IAAI,CAACC,MAAT,CAAgBH,MAAhB,EACjBI,QADiB,GAEjBC,QAFiB,EAAtB;AAGAT,IAAAA,2BAA2B,CAACK,eAAD,CAA3B,GAA+CD,MAA/C;AACAH,IAAAA,yBAAyB,CAACS,GAA1B,CAA8BL,eAA9B;AACH,GAND;AAOA,MAAIM,WAAJ;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,kBAAkB,GAAGf,gBAAtC,EAAwDc,EAAE,GAAGC,kBAAkB,CAACC,MAAhF,EAAwFF,EAAE,EAA1F,EAA8F;AAC1F,QAAIG,CAAC,GAAGF,kBAAkB,CAACD,EAAD,CAA1B;;AACA,QAAID,WAAJ,EAAiB;AACb;AACH;;AACD,QAAIK,iBAAiB,GAAGD,CAAC,CAACE,OAAF,CAAUtB,gCAAV,EAA4C,EAA5C,CAAxB;;AACA,QAAIE,gBAAgB,CAACqB,GAAjB,CAAqBF,iBAArB,CAAJ,EAA6C;AACzCL,MAAAA,WAAW,GAAGK,iBAAd;AACA;AACH;;AACD,QAAIf,yBAAyB,CAACiB,GAA1B,CAA8BF,iBAA9B,CAAJ,EAAsD;AAClDL,MAAAA,WAAW,GAAGX,2BAA2B,CAACgB,iBAAD,CAAzC;AACA;AACH;;AACD,QAAIZ,MAAM,GAAG,IAAIE,IAAI,CAACC,MAAT,CAAgBS,iBAAhB,CAAb;AACA,QAAIG,wBAAwB,GAAGf,MAAM,CAACgB,QAAP,GAAkBX,QAAlB,EAA/B;AACA,QAAIY,wBAAwB,GAAGjB,MAAM,CAACI,QAAP,GAAkBC,QAAlB,EAA/B,CAhB0F,CAiB1F;;AACA,QAAIR,yBAAyB,CAACiB,GAA1B,CAA8BG,wBAA9B,CAAJ,EAA6D;AACzDV,MAAAA,WAAW,GAAGX,2BAA2B,CAACqB,wBAAD,CAAzC;AACA;AACH,KArByF,CAsB1F;;;AACAV,IAAAA,WAAW,GAAGjB,mBAAmB,CAACO,yBAAD,EAA4BkB,wBAA5B,CAAjC;AACH;;AACD,SAAO;AACHf,IAAAA,MAAM,EAAEO,WAAW,IAAIZ,gBAAgB;AADpC,GAAP;AAGH","sourcesContent":["import { BestAvailableLocale } from './BestAvailableLocale';\nimport { UNICODE_EXTENSION_SEQUENCE_REGEX } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-bestfitmatcher\n * @param availableLocales\n * @param requestedLocales\n * @param getDefaultLocale\n */\nexport function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {\n    var minimizedAvailableLocaleMap = {};\n    var minimizedAvailableLocales = new Set();\n    availableLocales.forEach(function (locale) {\n        var minimizedLocale = new Intl.Locale(locale)\n            .minimize()\n            .toString();\n        minimizedAvailableLocaleMap[minimizedLocale] = locale;\n        minimizedAvailableLocales.add(minimizedLocale);\n    });\n    var foundLocale;\n    for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n        var l = requestedLocales_1[_i];\n        if (foundLocale) {\n            break;\n        }\n        var noExtensionLocale = l.replace(UNICODE_EXTENSION_SEQUENCE_REGEX, '');\n        if (availableLocales.has(noExtensionLocale)) {\n            foundLocale = noExtensionLocale;\n            break;\n        }\n        if (minimizedAvailableLocales.has(noExtensionLocale)) {\n            foundLocale = minimizedAvailableLocaleMap[noExtensionLocale];\n            break;\n        }\n        var locale = new Intl.Locale(noExtensionLocale);\n        var maximizedRequestedLocale = locale.maximize().toString();\n        var minimizedRequestedLocale = locale.minimize().toString();\n        // Check minimized locale\n        if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {\n            foundLocale = minimizedAvailableLocaleMap[minimizedRequestedLocale];\n            break;\n        }\n        // Lookup algo on maximized locale\n        foundLocale = BestAvailableLocale(minimizedAvailableLocales, maximizedRequestedLocale);\n    }\n    return {\n        locale: foundLocale || getDefaultLocale(),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}