{"ast":null,"code":"import { DataUtil } from './_DataUtil';\nimport { getUniqueIdWithPrefix } from './_TypesHelpers';\nexport class EventHandlerUtil {\n  static setEventMetasByName(name, metas) {\n    EventHandlerUtil.store.set(name, metas);\n  }\n\n  static getEventMetasByName(name) {\n    return EventHandlerUtil.store.get(name);\n  }\n\n  static setEventMetaByNameAndHandlerId(name, handlerId, meta) {\n    let metas = EventHandlerUtil.getEventMetasByName(name);\n\n    if (!metas) {\n      metas = new Map();\n    }\n\n    metas.set(handlerId, meta);\n    EventHandlerUtil.setEventMetasByName(name, metas);\n  }\n\n  static getEventsMetaByHandlerId(name, handlerId) {\n    const metas = EventHandlerUtil.store.get(name);\n\n    if (!metas) {\n      return;\n    }\n\n    return metas.get(handlerId);\n  }\n\n  static setFiredByNameAndHandlerId(name, handerId, fired) {\n    const meta = EventHandlerUtil.getEventsMetaByHandlerId(name, handerId);\n\n    if (!meta) {\n      return;\n    }\n\n    meta.fired = fired;\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handerId, meta);\n  }\n\n  static addEvent(element, name, callback, one = false) {\n    const handlerId = getUniqueIdWithPrefix('event');\n    DataUtil.set(element, name, handlerId);\n    const meta = {\n      name: name,\n      callback: callback,\n      one: one,\n      fired: false\n    };\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handlerId, meta);\n  }\n\n  static removeEvent(element, name) {\n    const handlerId = DataUtil.get(element, name);\n\n    if (!handlerId) {\n      return;\n    }\n\n    const metas = EventHandlerUtil.getEventMetasByName(name);\n\n    if (!metas) {\n      return;\n    }\n\n    metas.delete(handlerId);\n    EventHandlerUtil.setEventMetasByName(name, metas);\n  }\n\n  static trigger(element, name, e) {\n    if (DataUtil.has(element, name)) {\n      const handlerId = DataUtil.get(element, name);\n\n      if (!handlerId) {\n        return undefined;\n      }\n\n      const handler = EventHandlerUtil.getEventsMetaByHandlerId(name, handlerId);\n\n      if (handler) {\n        if (handler.name === name) {\n          if (handler.one === true) {\n            if (handler.fired === false) {\n              EventHandlerUtil.setFiredByNameAndHandlerId(name, handlerId, true);\n              return handler.callback.call(this, e);\n            }\n          } else {\n            return handler.callback.call(this, e);\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static one(element, name, callBack) {\n    EventHandlerUtil.addEvent(element, name, callBack, true);\n  }\n\n  static off(element, name) {\n    EventHandlerUtil.removeEvent(element, name);\n  }\n\n}\nEventHandlerUtil.store = new Map();\n\nEventHandlerUtil.on = function (element, name, callBack) {\n  EventHandlerUtil.addEvent(element, name, callBack, false);\n};","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/assets/ts/_utils/EventHandlerUtil.ts"],"names":["DataUtil","getUniqueIdWithPrefix","EventHandlerUtil","setEventMetasByName","name","metas","store","set","getEventMetasByName","get","setEventMetaByNameAndHandlerId","handlerId","meta","Map","getEventsMetaByHandlerId","setFiredByNameAndHandlerId","handerId","fired","addEvent","element","callback","one","removeEvent","delete","trigger","e","has","undefined","handler","call","callBack","off","on"],"mappings":"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","sourcesContent":["import {DataUtil} from './_DataUtil'\r\nimport {getUniqueIdWithPrefix} from './_TypesHelpers'\r\n\r\nexport interface EventMeta {\r\n  name: string\r\n  callback: Function\r\n  one: boolean\r\n  fired: boolean\r\n}\r\n\r\nexport class EventHandlerUtil {\r\n  static store: Map<string, Map<string, EventMeta>> = new Map()\r\n\r\n  private static setEventMetasByName(name: string, metas: Map<string, EventMeta>): void {\r\n    EventHandlerUtil.store.set(name, metas)\r\n  }\r\n\r\n  private static getEventMetasByName(name: string): Map<string, EventMeta> | undefined {\r\n    return EventHandlerUtil.store.get(name)\r\n  }\r\n\r\n  private static setEventMetaByNameAndHandlerId(\r\n    name: string,\r\n    handlerId: string,\r\n    meta: EventMeta\r\n  ): void {\r\n    let metas = EventHandlerUtil.getEventMetasByName(name)\r\n    if (!metas) {\r\n      metas = new Map()\r\n    }\r\n\r\n    metas.set(handlerId, meta)\r\n    EventHandlerUtil.setEventMetasByName(name, metas)\r\n  }\r\n\r\n  private static getEventsMetaByHandlerId(name: string, handlerId: string): EventMeta | undefined {\r\n    const metas = EventHandlerUtil.store.get(name)\r\n    if (!metas) {\r\n      return\r\n    }\r\n\r\n    return metas.get(handlerId)\r\n  }\r\n\r\n  private static setFiredByNameAndHandlerId(name: string, handerId: string, fired: boolean): void {\r\n    const meta = EventHandlerUtil.getEventsMetaByHandlerId(name, handerId)\r\n    if (!meta) {\r\n      return\r\n    }\r\n\r\n    meta.fired = fired\r\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handerId, meta)\r\n  }\r\n\r\n  private static addEvent(\r\n    element: HTMLElement,\r\n    name: string,\r\n    callback: Function,\r\n    one: boolean = false\r\n  ) {\r\n    const handlerId = getUniqueIdWithPrefix('event')\r\n    DataUtil.set(element, name, handlerId)\r\n    const meta: EventMeta = {\r\n      name: name,\r\n      callback: callback,\r\n      one: one,\r\n      fired: false,\r\n    }\r\n\r\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handlerId, meta)\r\n  }\r\n\r\n  private static removeEvent(element: HTMLElement, name: string) {\r\n    const handlerId = DataUtil.get(element, name)\r\n    if (!handlerId) {\r\n      return\r\n    }\r\n\r\n    const metas = EventHandlerUtil.getEventMetasByName(name)\r\n    if (!metas) {\r\n      return\r\n    }\r\n\r\n    metas.delete(handlerId)\r\n    EventHandlerUtil.setEventMetasByName(name, metas)\r\n  }\r\n\r\n  public static trigger(element: HTMLElement, name: string, e?: Event) {\r\n    if (DataUtil.has(element, name)) {\r\n      const handlerId = DataUtil.get(element, name)\r\n      if (!handlerId) {\r\n        return undefined\r\n      }\r\n\r\n      const handler = EventHandlerUtil.getEventsMetaByHandlerId(name, handlerId)\r\n      if (handler) {\r\n        if (handler.name === name) {\r\n          if (handler.one === true) {\r\n            if (handler.fired === false) {\r\n              EventHandlerUtil.setFiredByNameAndHandlerId(name, handlerId, true)\r\n              return handler.callback.call(this, e)\r\n            }\r\n          } else {\r\n            return handler.callback.call(this, e)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static on = function (element: HTMLElement, name: string, callBack: Function): void {\r\n    EventHandlerUtil.addEvent(element, name, callBack, false)\r\n  }\r\n\r\n  public static one(element: HTMLElement, name: string, callBack: Function): void {\r\n    EventHandlerUtil.addEvent(element, name, callBack, true)\r\n  }\r\n\r\n  public static off(element: HTMLElement, name: string): void {\r\n    EventHandlerUtil.removeEvent(element, name)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}