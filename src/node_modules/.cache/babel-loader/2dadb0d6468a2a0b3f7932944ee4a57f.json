{"ast":null,"code":"var _jsxFileName = \"/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/partials/content/code-highlight/CodeBlock.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport theme from 'prism-react-renderer/themes/shadesOfPurple';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap-v5';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeBlock = ({\n  code,\n  language\n}) => {\n  _s();\n\n  const codeRef = useRef(null);\n  const [copied, setCopied] = useState(false);\n  useEffect(() => {\n    if (!copied) {\n      return;\n    }\n\n    setTimeout(() => {\n      setCopied(false);\n    }, 1500);\n  }, [copied]);\n  useEffect(() => {\n    if (!codeRef.current) {\n      return;\n    }\n\n    const prismCodeElement = codeRef.current.querySelector('.prism-code ');\n\n    if (prismCodeElement) {\n      prismCodeElement.style.background = 'none';\n      prismCodeElement.style.fontSize = '13px';\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"highlight\",\n      children: [/*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        placement: \"top\",\n        overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: \"tooltip-copy-to-clipboard\",\n          children: \"Copy Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 20\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n          text: code,\n          onCopy: () => setCopied(true),\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"highlight-copy btn\",\n            children: copied ? 'copied' : 'copy'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, 'copy-to-clipboard', false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"highlight-code\",\n        ref: codeRef,\n        children: /*#__PURE__*/_jsxDEV(Highlight, { ...defaultProps,\n          theme: theme,\n          code: code,\n          language: language,\n          children: ({\n            className,\n            style,\n            tokens,\n            getLineProps,\n            getTokenProps\n          }) => {\n            return /*#__PURE__*/_jsxDEV(\"pre\", {\n              className: className,\n              style: {\n                maxHeight: '300px',\n                ...style\n              },\n              children: tokens.map((line, i) => /*#__PURE__*/_jsxDEV(\"div\", { ...getLineProps({\n                  line,\n                  key: i\n                }),\n                children: line.map((token, key) => /*#__PURE__*/_jsxDEV(\"span\", { ...getTokenProps({\n                    token,\n                    key\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeBlock, \"kJ1Wcs6ScucFQbCfmaIItBP7BQA=\");\n\n_c = CodeBlock;\nexport { CodeBlock };\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeBlock\");","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/partials/content/code-highlight/CodeBlock.tsx"],"names":["React","useState","useEffect","useRef","CopyToClipboard","Highlight","defaultProps","theme","OverlayTrigger","Tooltip","CodeBlock","code","language","codeRef","copied","setCopied","setTimeout","current","prismCodeElement","querySelector","style","background","fontSize","className","tokens","getLineProps","getTokenProps","maxHeight","map","line","i","key","token"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useState, useEffect, useRef} from 'react'\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard'\r\nimport Highlight, {defaultProps, Language} from 'prism-react-renderer'\r\nimport theme from 'prism-react-renderer/themes/shadesOfPurple'\r\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap-v5'\r\n\r\ntype Props = {\r\n  code: string\r\n  language: Language\r\n}\r\n\r\nconst CodeBlock: React.FC<Props> = ({code, language}) => {\r\n  const codeRef = useRef<HTMLDivElement | null>(null)\r\n  const [copied, setCopied] = useState(false)\r\n  useEffect(() => {\r\n    if (!copied) {\r\n      return\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setCopied(false)\r\n    }, 1500)\r\n  }, [copied])\r\n\r\n  useEffect(() => {\r\n    if (!codeRef.current) {\r\n      return\r\n    }\r\n\r\n    const prismCodeElement = codeRef.current.querySelector('.prism-code ') as HTMLDivElement\r\n    if (prismCodeElement) {\r\n      prismCodeElement.style.background = 'none'\r\n      prismCodeElement.style.fontSize = '13px'\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className='py-5'>\r\n      <div className='highlight'>\r\n        <OverlayTrigger\r\n          key='copy-to-clipboard'\r\n          placement='top'\r\n          overlay={<Tooltip id='tooltip-copy-to-clipboard'>Copy Code</Tooltip>}\r\n        >\r\n          <CopyToClipboard text={code} onCopy={() => setCopied(true)}>\r\n            <a className='highlight-copy btn'>{copied ? 'copied' : 'copy'}</a>\r\n          </CopyToClipboard>\r\n        </OverlayTrigger>\r\n\r\n        <div className='highlight-code' ref={codeRef}>\r\n          <Highlight {...defaultProps} theme={theme} code={code} language={language}>\r\n            {({className, style, tokens, getLineProps, getTokenProps}) => {\r\n              return (\r\n                <pre className={className} style={{maxHeight: '300px', ...style}}>\r\n                  {tokens.map((line, i) => (\r\n                    <div {...getLineProps({line, key: i})}>\r\n                      {line.map((token, key) => (\r\n                        <span {...getTokenProps({token, key})} />\r\n                      ))}\r\n                    </div>\r\n                  ))}\r\n                </pre>\r\n              )\r\n            }}\r\n          </Highlight>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {CodeBlock}\r\n"]},"metadata":{},"sourceType":"module"}