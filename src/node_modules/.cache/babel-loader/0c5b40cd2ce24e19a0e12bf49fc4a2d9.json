{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { createFormatters, DEFAULT_INTL_CONFIG } from './utils';\nimport { InvalidConfigError, MissingDataError } from './error';\nimport { formatNumber, formatNumberToParts } from './number';\nimport { formatRelativeTime } from './relativeTime';\nimport { formatDate, formatDateToParts, formatTime, formatTimeToParts, formatDateTimeRange } from './dateTime';\nimport { formatPlural } from './plural';\nimport { formatMessage } from './message';\nimport { formatList, formatListToParts } from './list';\nimport { formatDisplayName } from './displayName';\n\nfunction messagesContainString(messages) {\n  var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;\n  return typeof firstMessage === 'string';\n}\n\nfunction verifyConfigMessages(config) {\n  if (config.defaultRichTextElements && messagesContainString(config.messages || {})) {\n    console.warn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n  }\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\n\n\nexport function createIntl(config, cache) {\n  var formatters = createFormatters(cache);\n\n  var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);\n\n  var locale = resolvedConfig.locale,\n      defaultLocale = resolvedConfig.defaultLocale,\n      onError = resolvedConfig.onError;\n\n  if (!locale) {\n    if (onError) {\n      onError(new InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\"));\n    } // Since there's no registered locale data for `locale`, this will\n    // fallback to the `defaultLocale` to make sure things can render.\n    // The `messages` are overridden to the `defaultProps` empty object\n    // to maintain referential equality across re-renders. It's assumed\n    // each <FormattedMessage> contains a `defaultMessage` prop.\n\n\n    resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.NumberFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n  }\n\n  verifyConfigMessages(resolvedConfig);\n  return __assign(__assign({}, resolvedConfig), {\n    formatters: formatters,\n    formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),\n    formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),\n    formatMessage: formatMessage.bind(null, resolvedConfig, formatters),\n    formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat),\n    formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat),\n    formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames)\n  });\n}","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/node_modules/@formatjs/intl/lib/src/create-intl.js"],"names":["__assign","createFormatters","DEFAULT_INTL_CONFIG","InvalidConfigError","MissingDataError","formatNumber","formatNumberToParts","formatRelativeTime","formatDate","formatDateToParts","formatTime","formatTimeToParts","formatDateTimeRange","formatPlural","formatMessage","formatList","formatListToParts","formatDisplayName","messagesContainString","messages","firstMessage","Object","keys","undefined","verifyConfigMessages","config","defaultRichTextElements","console","warn","createIntl","cache","formatters","resolvedConfig","locale","defaultLocale","onError","Intl","NumberFormat","supportedLocalesOf","length","DateTimeFormat","bind","getNumberFormat","getRelativeTimeFormat","getDateTimeFormat","getPluralRules","getListFormat","getDisplayNames"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { createFormatters, DEFAULT_INTL_CONFIG } from './utils';\nimport { InvalidConfigError, MissingDataError } from './error';\nimport { formatNumber, formatNumberToParts } from './number';\nimport { formatRelativeTime } from './relativeTime';\nimport { formatDate, formatDateToParts, formatTime, formatTimeToParts, formatDateTimeRange, } from './dateTime';\nimport { formatPlural } from './plural';\nimport { formatMessage } from './message';\nimport { formatList, formatListToParts } from './list';\nimport { formatDisplayName } from './displayName';\nfunction messagesContainString(messages) {\n    var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;\n    return typeof firstMessage === 'string';\n}\nfunction verifyConfigMessages(config) {\n    if (config.defaultRichTextElements &&\n        messagesContainString(config.messages || {})) {\n        console.warn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n    }\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport function createIntl(config, cache) {\n    var formatters = createFormatters(cache);\n    var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);\n    var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;\n    if (!locale) {\n        if (onError) {\n            onError(new InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\"));\n        }\n        // Since there's no registered locale data for `locale`, this will\n        // fallback to the `defaultLocale` to make sure things can render.\n        // The `messages` are overridden to the `defaultProps` empty object\n        // to maintain referential equality across re-renders. It's assumed\n        // each <FormattedMessage> contains a `defaultMessage` prop.\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n    }\n    else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n        onError(new MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.NumberFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n    }\n    else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length &&\n        onError) {\n        onError(new MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n    }\n    verifyConfigMessages(resolvedConfig);\n    return __assign(__assign({}, resolvedConfig), { formatters: formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: formatMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });\n}\n"]},"metadata":{},"sourceType":"module"}