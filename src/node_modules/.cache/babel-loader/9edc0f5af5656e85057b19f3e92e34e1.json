{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\nimport * as React from 'react';\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport useIntl from './useIntl';\nvar MINUTE = 60;\nvar HOUR = 60 * 60;\nvar DAY = 60 * 60 * 24;\n\nfunction selectUnit(seconds) {\n  var absValue = Math.abs(seconds);\n\n  if (absValue < MINUTE) {\n    return 'second';\n  }\n\n  if (absValue < HOUR) {\n    return 'minute';\n  }\n\n  if (absValue < DAY) {\n    return 'hour';\n  }\n\n  return 'day';\n}\n\nfunction getDurationInSeconds(unit) {\n  switch (unit) {\n    case 'second':\n      return 1;\n\n    case 'minute':\n      return MINUTE;\n\n    case 'hour':\n      return HOUR;\n\n    default:\n      return DAY;\n  }\n}\n\nfunction valueToSeconds(value, unit) {\n  if (!value) {\n    return 0;\n  }\n\n  switch (unit) {\n    case 'second':\n      return value;\n\n    case 'minute':\n      return value * MINUTE;\n\n    default:\n      return value * HOUR;\n  }\n}\n\nvar INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\n\nfunction canIncrement(unit) {\n  if (unit === void 0) {\n    unit = 'second';\n  }\n\n  return INCREMENTABLE_UNITS.includes(unit);\n}\n\nvar SimpleFormattedRelativeTime = function (props) {\n  var _a = useIntl(),\n      formatRelativeTime = _a.formatRelativeTime,\n      Text = _a.textComponent;\n\n  var children = props.children,\n      value = props.value,\n      unit = props.unit,\n      otherProps = __rest(props, [\"children\", \"value\", \"unit\"]);\n\n  var formattedRelativeTime = formatRelativeTime(value || 0, unit, otherProps);\n\n  if (typeof children === 'function') {\n    return children(formattedRelativeTime);\n  }\n\n  if (Text) {\n    return React.createElement(Text, null, formattedRelativeTime);\n  }\n\n  return React.createElement(React.Fragment, null, formattedRelativeTime);\n};\n\nvar FormattedRelativeTime = function (_a) {\n  var value = _a.value,\n      unit = _a.unit,\n      updateIntervalInSeconds = _a.updateIntervalInSeconds,\n      otherProps = __rest(_a, [\"value\", \"unit\", \"updateIntervalInSeconds\"]);\n\n  invariant(!updateIntervalInSeconds || !!(updateIntervalInSeconds && canIncrement(unit)), 'Cannot schedule update with unit longer than hour');\n\n  var _b = React.useState(),\n      prevUnit = _b[0],\n      setPrevUnit = _b[1];\n\n  var _c = React.useState(0),\n      prevValue = _c[0],\n      setPrevValue = _c[1];\n\n  var _d = React.useState(0),\n      currentValueInSeconds = _d[0],\n      setCurrentValueInSeconds = _d[1];\n\n  var updateTimer;\n\n  if (unit !== prevUnit || value !== prevValue) {\n    setPrevValue(value || 0);\n    setPrevUnit(unit);\n    setCurrentValueInSeconds(canIncrement(unit) ? valueToSeconds(value, unit) : 0);\n  }\n\n  React.useEffect(function () {\n    function clearUpdateTimer() {\n      clearTimeout(updateTimer);\n    }\n\n    clearUpdateTimer(); // If there's no interval and we cannot increment this unit, do nothing\n\n    if (!updateIntervalInSeconds || !canIncrement(unit)) {\n      return clearUpdateTimer;\n    } // Figure out the next interesting time\n\n\n    var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n    var nextUnit = selectUnit(nextValueInSeconds); // We've reached the max auto incrementable unit, don't schedule another update\n\n    if (nextUnit === 'day') {\n      return clearUpdateTimer;\n    }\n\n    var unitDuration = getDurationInSeconds(nextUnit);\n    var remainder = nextValueInSeconds % unitDuration;\n    var prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n    var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration : prevInterestingValueInSeconds;\n    var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n\n    if (currentValueInSeconds !== nextInterestingValueInSeconds) {\n      updateTimer = setTimeout(function () {\n        return setCurrentValueInSeconds(nextInterestingValueInSeconds);\n      }, delayInSeconds * 1e3);\n    }\n\n    return clearUpdateTimer;\n  }, [currentValueInSeconds, updateIntervalInSeconds, unit]);\n  var currentValue = value || 0;\n  var currentUnit = unit;\n\n  if (canIncrement(unit) && typeof currentValueInSeconds === 'number' && updateIntervalInSeconds) {\n    currentUnit = selectUnit(currentValueInSeconds);\n    var unitDuration = getDurationInSeconds(currentUnit);\n    currentValue = Math.round(currentValueInSeconds / unitDuration);\n  }\n\n  return React.createElement(SimpleFormattedRelativeTime, __assign({\n    value: currentValue,\n    unit: currentUnit\n  }, otherProps));\n};\n\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n  value: 0,\n  unit: 'second'\n};\nexport default FormattedRelativeTime;","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/node_modules/react-intl/lib/src/components/relative.js"],"names":["__assign","__rest","React","invariant","useIntl","MINUTE","HOUR","DAY","selectUnit","seconds","absValue","Math","abs","getDurationInSeconds","unit","valueToSeconds","value","INCREMENTABLE_UNITS","canIncrement","includes","SimpleFormattedRelativeTime","props","_a","formatRelativeTime","Text","textComponent","children","otherProps","formattedRelativeTime","createElement","Fragment","FormattedRelativeTime","updateIntervalInSeconds","_b","useState","prevUnit","setPrevUnit","_c","prevValue","setPrevValue","_d","currentValueInSeconds","setCurrentValueInSeconds","updateTimer","useEffect","clearUpdateTimer","clearTimeout","nextValueInSeconds","nextUnit","unitDuration","remainder","prevInterestingValueInSeconds","nextInterestingValueInSeconds","delayInSeconds","setTimeout","currentValue","currentUnit","round","displayName","defaultProps"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { invariant, } from '@formatjs/ecma402-abstract';\nimport useIntl from './useIntl';\nvar MINUTE = 60;\nvar HOUR = 60 * 60;\nvar DAY = 60 * 60 * 24;\nfunction selectUnit(seconds) {\n    var absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return 'second';\n    }\n    if (absValue < HOUR) {\n        return 'minute';\n    }\n    if (absValue < DAY) {\n        return 'hour';\n    }\n    return 'day';\n}\nfunction getDurationInSeconds(unit) {\n    switch (unit) {\n        case 'second':\n            return 1;\n        case 'minute':\n            return MINUTE;\n        case 'hour':\n            return HOUR;\n        default:\n            return DAY;\n    }\n}\nfunction valueToSeconds(value, unit) {\n    if (!value) {\n        return 0;\n    }\n    switch (unit) {\n        case 'second':\n            return value;\n        case 'minute':\n            return value * MINUTE;\n        default:\n            return value * HOUR;\n    }\n}\nvar INCREMENTABLE_UNITS = [\n    'second',\n    'minute',\n    'hour',\n];\nfunction canIncrement(unit) {\n    if (unit === void 0) { unit = 'second'; }\n    return INCREMENTABLE_UNITS.includes(unit);\n}\nvar SimpleFormattedRelativeTime = function (props) {\n    var _a = useIntl(), formatRelativeTime = _a.formatRelativeTime, Text = _a.textComponent;\n    var children = props.children, value = props.value, unit = props.unit, otherProps = __rest(props, [\"children\", \"value\", \"unit\"]);\n    var formattedRelativeTime = formatRelativeTime(value || 0, unit, otherProps);\n    if (typeof children === 'function') {\n        return children(formattedRelativeTime);\n    }\n    if (Text) {\n        return React.createElement(Text, null, formattedRelativeTime);\n    }\n    return React.createElement(React.Fragment, null, formattedRelativeTime);\n};\nvar FormattedRelativeTime = function (_a) {\n    var value = _a.value, unit = _a.unit, updateIntervalInSeconds = _a.updateIntervalInSeconds, otherProps = __rest(_a, [\"value\", \"unit\", \"updateIntervalInSeconds\"]);\n    invariant(!updateIntervalInSeconds ||\n        !!(updateIntervalInSeconds && canIncrement(unit)), 'Cannot schedule update with unit longer than hour');\n    var _b = React.useState(), prevUnit = _b[0], setPrevUnit = _b[1];\n    var _c = React.useState(0), prevValue = _c[0], setPrevValue = _c[1];\n    var _d = React.useState(0), currentValueInSeconds = _d[0], setCurrentValueInSeconds = _d[1];\n    var updateTimer;\n    if (unit !== prevUnit || value !== prevValue) {\n        setPrevValue(value || 0);\n        setPrevUnit(unit);\n        setCurrentValueInSeconds(canIncrement(unit) ? valueToSeconds(value, unit) : 0);\n    }\n    React.useEffect(function () {\n        function clearUpdateTimer() {\n            clearTimeout(updateTimer);\n        }\n        clearUpdateTimer();\n        // If there's no interval and we cannot increment this unit, do nothing\n        if (!updateIntervalInSeconds || !canIncrement(unit)) {\n            return clearUpdateTimer;\n        }\n        // Figure out the next interesting time\n        var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n        var nextUnit = selectUnit(nextValueInSeconds);\n        // We've reached the max auto incrementable unit, don't schedule another update\n        if (nextUnit === 'day') {\n            return clearUpdateTimer;\n        }\n        var unitDuration = getDurationInSeconds(nextUnit);\n        var remainder = nextValueInSeconds % unitDuration;\n        var prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n        var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds\n            ? prevInterestingValueInSeconds - unitDuration\n            : prevInterestingValueInSeconds;\n        var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n        if (currentValueInSeconds !== nextInterestingValueInSeconds) {\n            updateTimer = setTimeout(function () { return setCurrentValueInSeconds(nextInterestingValueInSeconds); }, delayInSeconds * 1e3);\n        }\n        return clearUpdateTimer;\n    }, [currentValueInSeconds, updateIntervalInSeconds, unit]);\n    var currentValue = value || 0;\n    var currentUnit = unit;\n    if (canIncrement(unit) &&\n        typeof currentValueInSeconds === 'number' &&\n        updateIntervalInSeconds) {\n        currentUnit = selectUnit(currentValueInSeconds);\n        var unitDuration = getDurationInSeconds(currentUnit);\n        currentValue = Math.round(currentValueInSeconds / unitDuration);\n    }\n    return (React.createElement(SimpleFormattedRelativeTime, __assign({ value: currentValue, unit: currentUnit }, otherProps)));\n};\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n    value: 0,\n    unit: 'second',\n};\nexport default FormattedRelativeTime;\n"]},"metadata":{},"sourceType":"module"}