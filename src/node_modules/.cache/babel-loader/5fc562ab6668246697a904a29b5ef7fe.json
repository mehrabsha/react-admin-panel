{"ast":null,"code":"var _jsxFileName = \"/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/app/routing/Routes.tsx\",\n    _s = $RefreshSig$();\n\n/**\r\n * High level router.\r\n *\r\n * Note: It's recommended to compose related routes in internal router\r\n * components (e.g: `src/app/modules/Auth/pages/AuthPage`, `src/app/BasePage`).\r\n */\nimport React from 'react';\nimport { Redirect, Switch, Route } from 'react-router-dom';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { MasterLayout } from '../../_metronic/layout/MasterLayout';\nimport { PrivateRoutes } from './PrivateRoutes';\nimport { Logout, AuthPage } from '../modules/auth';\nimport { ErrorsPage } from '../modules/errors/ErrorsPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Routes = () => {\n  _s();\n\n  const isAuthorized = useSelector(({\n    auth\n  }) => auth.user, shallowEqual);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [!isAuthorized ?\n    /*#__PURE__*/\n\n    /*Render auth page when user at `/auth` and not authorized.*/\n    _jsxDEV(Route, {\n      children: /*#__PURE__*/_jsxDEV(AuthPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n\n    /*Otherwise redirect to root page (`/`)*/\n    _jsxDEV(Redirect, {\n      from: \"/auth\",\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/error\",\n      component: ErrorsPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/logout\",\n      component: Logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), !isAuthorized ?\n    /*#__PURE__*/\n\n    /*Redirect to `/auth` when user is not authorized*/\n    _jsxDEV(Redirect, {\n      to: \"/auth/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MasterLayout, {\n      children: /*#__PURE__*/_jsxDEV(PrivateRoutes, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Routes, \"NreU8953txq+1yW6k0mkN00ktRQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = Routes;\nexport { Routes };\n\nvar _c;\n\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/app/routing/Routes.tsx"],"names":["React","Redirect","Switch","Route","shallowEqual","useSelector","MasterLayout","PrivateRoutes","Logout","AuthPage","ErrorsPage","Routes","isAuthorized","auth","user"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAAQC,QAAR,EAAkBC,MAAlB,EAA0BC,KAA1B,QAAsC,kBAAtC;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,aAAxC;AACA,SAAQC,YAAR,QAA2B,qCAA3B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,iBAA/B;AACA,SAAQC,UAAR,QAAyB,8BAAzB;;;AAGA,MAAMC,MAAU,GAAG,MAAM;AAAA;;AACvB,QAAMC,YAAY,GAAGP,WAAW,CAAY,CAAC;AAACQ,IAAAA;AAAD,GAAD,KAAYA,IAAI,CAACC,IAA7B,EAAmCV,YAAnC,CAAhC;AAEA,sBACE,QAAC,MAAD;AAAA,eACG,CAACQ,YAAD;AAAA;;AACC;AACA,YAAC,KAAD;AAAA,6BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;;AAMC;AACA,YAAC,QAAD;AAAU,MAAA,IAAI,EAAC,OAAf;AAAuB,MAAA,EAAE,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YARJ,eAWE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAEF;AAAhC;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,SAAS,EAAEF;AAAjC;AAAA;AAAA;AAAA;AAAA,YAZF,EAcG,CAACI,YAAD;AAAA;;AACC;AACA,YAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAFD,gBAIC,QAAC,YAAD;AAAA,6BACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CA5BD;;GAAMD,M;UACiBN,W;;;KADjBM,M;AA8BN,SAAQA,MAAR","sourcesContent":["/**\r\n * High level router.\r\n *\r\n * Note: It's recommended to compose related routes in internal router\r\n * components (e.g: `src/app/modules/Auth/pages/AuthPage`, `src/app/BasePage`).\r\n */\r\n\r\nimport React, {FC} from 'react'\r\nimport {Redirect, Switch, Route} from 'react-router-dom'\r\nimport {shallowEqual, useSelector} from 'react-redux'\r\nimport {MasterLayout} from '../../_metronic/layout/MasterLayout'\r\nimport {PrivateRoutes} from './PrivateRoutes'\r\nimport {Logout, AuthPage} from '../modules/auth'\r\nimport {ErrorsPage} from '../modules/errors/ErrorsPage'\r\nimport {RootState} from '../../setup'\r\n\r\nconst Routes: FC = () => {\r\n  const isAuthorized = useSelector<RootState>(({auth}) => auth.user, shallowEqual)\r\n\r\n  return (\r\n    <Switch>\r\n      {!isAuthorized ? (\r\n        /*Render auth page when user at `/auth` and not authorized.*/\r\n        <Route>\r\n          <AuthPage />\r\n        </Route>\r\n      ) : (\r\n        /*Otherwise redirect to root page (`/`)*/\r\n        <Redirect from='/auth' to='/' />\r\n      )}\r\n\r\n      <Route path='/error' component={ErrorsPage} />\r\n      <Route path='/logout' component={Logout} />\r\n\r\n      {!isAuthorized ? (\r\n        /*Redirect to `/auth` when user is not authorized*/\r\n        <Redirect to='/auth/login' />\r\n      ) : (\r\n        <MasterLayout>\r\n          <PrivateRoutes />\r\n        </MasterLayout>\r\n      )}\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport {Routes}\r\n"]},"metadata":{},"sourceType":"module"}