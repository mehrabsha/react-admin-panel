{"ast":null,"code":"import { DataUtil, getAttributeValueByBreakpoint, stringSnakeToCamel, getObjectPropertyValueByKey, EventHandlerUtil, throttle } from '../_utils/index';\nconst defaultPlaceOptions = {\n  mode: 'append'\n};\nconst defaultPlaceQueires = {\n  componentName: 'place',\n  instanseQuery: '[data-kt-place=\"true\"]',\n  attrQuery: 'data-kt-place-'\n};\n\nclass PlaceComponent {\n  constructor(_element, _options, _queries) {\n    this.element = void 0;\n    this.options = void 0;\n    this.queries = void 0;\n\n    this.update = () => {\n      var _this$getOption;\n\n      const parentSelector = (_this$getOption = this.getOption('parent')) === null || _this$getOption === void 0 ? void 0 : _this$getOption.toString();\n      const mode = this.getOption('mode');\n      const parentElement = parentSelector ? document.querySelector(parentSelector) : null;\n\n      if (parentElement && this.element.parentNode !== parentElement) {\n        if (mode === 'prepend') {\n          parentElement.prepend(this.element);\n        } else if (mode === 'append') {\n          parentElement.append(this.element);\n        }\n      }\n    };\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = name => {\n      return EventHandlerUtil.off(this.element, name);\n    };\n\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultPlaceOptions, _options);\n    this.queries = _queries; // Initial update\n\n    this.update();\n    DataUtil.set(this.element, this.queries.componentName, this);\n  }\n\n  getOption(name) {\n    const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`);\n\n    if (attr) {\n      let value = getAttributeValueByBreakpoint(attr);\n\n      if (attr != null && String(value) === 'true') {\n        return true;\n      } else if (value !== null && String(value) === 'false') {\n        return false;\n      }\n\n      return value;\n    } else {\n      const optionName = stringSnakeToCamel(name);\n      const option = getObjectPropertyValueByKey(this.options, optionName);\n\n      if (option) {\n        return getAttributeValueByBreakpoint(option);\n      } else {\n        return null;\n      }\n    }\n  } ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n\n} // Window resize handler\n\n\nPlaceComponent.getInstance = (el, componentName = defaultPlaceQueires.componentName) => {\n  const place = DataUtil.get(el, componentName);\n\n  if (place) {\n    return place;\n  }\n\n  return null;\n};\n\nPlaceComponent.createInstances = (selector = defaultPlaceQueires.instanseQuery, options = defaultPlaceOptions, queries = defaultPlaceQueires) => {\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let place = PlaceComponent.getInstance(item);\n\n    if (!place) {\n      place = new PlaceComponent(item, options, queries);\n    }\n  });\n};\n\nPlaceComponent.createInsance = (selector = defaultPlaceQueires.instanseQuery, options = defaultPlaceOptions, queries = defaultPlaceQueires) => {\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let place = PlaceComponent.getInstance(item);\n\n  if (!place) {\n    place = new PlaceComponent(item, options, queries);\n  }\n\n  return place;\n};\n\nPlaceComponent.bootstrap = (selector = defaultPlaceQueires.instanseQuery) => {\n  PlaceComponent.createInstances(selector);\n};\n\nPlaceComponent.reinitialization = (selector = defaultPlaceQueires.instanseQuery) => {\n  PlaceComponent.createInstances(selector);\n};\n\nwindow.addEventListener('resize', function () {\n  let timer;\n  throttle(timer, () => {\n    // Locate and update Offcanvas instances on window resize\n    const elements = document.querySelectorAll(defaultPlaceQueires.instanseQuery);\n    elements.forEach(el => {\n      const place = PlaceComponent.getInstance(el);\n\n      if (place) {\n        place.update();\n      }\n    });\n  }, 200);\n});\nexport { PlaceComponent, defaultPlaceOptions, defaultPlaceQueires };","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/assets/ts/components/_PlaceComponent.ts"],"names":["DataUtil","getAttributeValueByBreakpoint","stringSnakeToCamel","getObjectPropertyValueByKey","EventHandlerUtil","throttle","defaultPlaceOptions","mode","defaultPlaceQueires","componentName","instanseQuery","attrQuery","PlaceComponent","constructor","_element","_options","_queries","element","options","queries","update","parentSelector","getOption","toString","parentElement","document","querySelector","parentNode","prepend","append","on","name","handler","one","off","trigger","event","Object","assign","set","attr","getAttribute","value","String","optionName","option","getInstance","el","place","get","createInstances","selector","elements","body","querySelectorAll","forEach","item","createInsance","bootstrap","reinitialization","window","addEventListener","timer"],"mappings":"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","sourcesContent":["import {\r\n  DataUtil,\r\n  getAttributeValueByBreakpoint,\r\n  stringSnakeToCamel,\r\n  getObjectPropertyValueByKey,\r\n  EventHandlerUtil,\r\n  throttle,\r\n} from '../_utils/index'\r\n\r\nexport interface IPlaceOptions {\r\n  mode: string\r\n}\r\n\r\nexport interface IPlaceQueries {\r\n  componentName: string\r\n  instanseQuery: string\r\n  attrQuery: string\r\n}\r\n\r\nconst defaultPlaceOptions: IPlaceOptions = {\r\n  mode: 'append',\r\n}\r\n\r\nconst defaultPlaceQueires: IPlaceQueries = {\r\n  componentName: 'place',\r\n  instanseQuery: '[data-kt-place=\"true\"]',\r\n  attrQuery: 'data-kt-place-',\r\n}\r\n\r\nclass PlaceComponent {\r\n  element: HTMLElement\r\n  options: IPlaceOptions\r\n  queries: IPlaceQueries\r\n\r\n  constructor(_element: HTMLElement, _options: IPlaceOptions, _queries: IPlaceQueries) {\r\n    this.element = _element\r\n    this.options = Object.assign(defaultPlaceOptions, _options)\r\n    this.queries = _queries\r\n\r\n    // Initial update\r\n    this.update()\r\n\r\n    DataUtil.set(this.element, this.queries.componentName, this)\r\n  }\r\n\r\n  private getOption(name: string) {\r\n    const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`)\r\n    if (attr) {\r\n      let value = getAttributeValueByBreakpoint(attr)\r\n      if (attr != null && String(value) === 'true') {\r\n        return true\r\n      } else if (value !== null && String(value) === 'false') {\r\n        return false\r\n      }\r\n      return value\r\n    } else {\r\n      const optionName = stringSnakeToCamel(name)\r\n      const option = getObjectPropertyValueByKey(this.options, optionName)\r\n      if (option) {\r\n        return getAttributeValueByBreakpoint(option)\r\n      } else {\r\n        return null\r\n      }\r\n    }\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n  public update = () => {\r\n    const parentSelector = this.getOption('parent')?.toString()\r\n    const mode = this.getOption('mode')\r\n    const parentElement = parentSelector ? document.querySelector(parentSelector) : null\r\n\r\n    if (parentElement && this.element.parentNode !== parentElement) {\r\n      if (mode === 'prepend') {\r\n        parentElement.prepend(this.element)\r\n      } else if (mode === 'append') {\r\n        parentElement.append(this.element)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Event API\r\n  public on = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.on(this.element, name, handler)\r\n  }\r\n\r\n  public one = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.one(this.element, name, handler)\r\n  }\r\n\r\n  public off = (name: string) => {\r\n    return EventHandlerUtil.off(this.element, name)\r\n  }\r\n\r\n  public trigger = (name: string, event: Event) => {\r\n    return EventHandlerUtil.trigger(this.element, name, event)\r\n  }\r\n\r\n  // Static methods\r\n  public static getInstance = (\r\n    el: HTMLElement,\r\n    componentName: string = defaultPlaceQueires.componentName\r\n  ): PlaceComponent | null => {\r\n    const place = DataUtil.get(el, componentName)\r\n    if (place) {\r\n      return place as PlaceComponent\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static createInstances = (\r\n    selector: string = defaultPlaceQueires.instanseQuery,\r\n    options: IPlaceOptions = defaultPlaceOptions,\r\n    queries: IPlaceQueries = defaultPlaceQueires\r\n  ) => {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((el) => {\r\n      const item = el as HTMLElement\r\n      let place = PlaceComponent.getInstance(item)\r\n      if (!place) {\r\n        place = new PlaceComponent(item, options, queries)\r\n      }\r\n    })\r\n  }\r\n\r\n  public static createInsance = (\r\n    selector: string = defaultPlaceQueires.instanseQuery,\r\n    options: IPlaceOptions = defaultPlaceOptions,\r\n    queries: IPlaceQueries = defaultPlaceQueires\r\n  ): PlaceComponent | undefined => {\r\n    const element = document.body.querySelector(selector)\r\n    if (!element) {\r\n      return\r\n    }\r\n    const item = element as HTMLElement\r\n    let place = PlaceComponent.getInstance(item)\r\n    if (!place) {\r\n      place = new PlaceComponent(item, options, queries)\r\n    }\r\n    return place\r\n  }\r\n\r\n  public static bootstrap = (selector: string = defaultPlaceQueires.instanseQuery) => {\r\n    PlaceComponent.createInstances(selector)\r\n  }\r\n\r\n  public static reinitialization = (selector: string = defaultPlaceQueires.instanseQuery) => {\r\n    PlaceComponent.createInstances(selector)\r\n  }\r\n}\r\n\r\n// Window resize handler\r\nwindow.addEventListener('resize', function () {\r\n  let timer\r\n\r\n  throttle(\r\n    timer,\r\n    () => {\r\n      // Locate and update Offcanvas instances on window resize\r\n      const elements = document.querySelectorAll(defaultPlaceQueires.instanseQuery)\r\n      elements.forEach((el) => {\r\n        const place = PlaceComponent.getInstance(el as HTMLElement)\r\n        if (place) {\r\n          place.update()\r\n        }\r\n      })\r\n    },\r\n    200\r\n  )\r\n})\r\n\r\nexport {PlaceComponent, defaultPlaceOptions, defaultPlaceQueires}\r\n"]},"metadata":{},"sourceType":"module"}