{"ast":null,"code":"import { FormatNumericToString } from './FormatNumericToString';\nimport { SameValue } from '../262';\nimport { ComputeExponent } from './ComputeExponent';\nimport formatToParts from './format_to_parts';\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\n\nexport function PartitionNumberPattern(numberFormat, x, _a) {\n  var _b;\n\n  var getInternalSlots = _a.getInternalSlots;\n  var internalSlots = getInternalSlots(numberFormat);\n  var pl = internalSlots.pl,\n      dataLocaleData = internalSlots.dataLocaleData,\n      numberingSystem = internalSlots.numberingSystem;\n  var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n  var magnitude = 0;\n  var exponent = 0;\n  var n;\n\n  if (isNaN(x)) {\n    n = symbols.nan;\n  } else if (!isFinite(x)) {\n    n = symbols.infinity;\n  } else {\n    if (internalSlots.style === 'percent') {\n      x *= 100;\n    }\n\n    ;\n    _b = ComputeExponent(numberFormat, x, {\n      getInternalSlots: getInternalSlots\n    }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.\n\n    x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n    var formatNumberResult = FormatNumericToString(internalSlots, x);\n    n = formatNumberResult.formattedString;\n    x = formatNumberResult.roundedNumber;\n  } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern\n  // We need to do this before `x` is rounded.\n\n\n  var sign;\n  var signDisplay = internalSlots.signDisplay;\n\n  switch (signDisplay) {\n    case 'never':\n      sign = 0;\n      break;\n\n    case 'auto':\n      if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n        sign = 0;\n      } else {\n        sign = -1;\n      }\n\n      break;\n\n    case 'always':\n      if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n\n      break;\n\n    default:\n      // x === 0 -> x is 0 or x is -0\n      if (x === 0 || isNaN(x)) {\n        sign = 0;\n      } else if (x > 0) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n\n  }\n\n  return formatToParts({\n    roundedNumber: x,\n    formattedString: n,\n    exponent: exponent,\n    magnitude: magnitude,\n    sign: sign\n  }, internalSlots.dataLocaleData, pl, internalSlots);\n}","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/PartitionNumberPattern.js"],"names":["FormatNumericToString","SameValue","ComputeExponent","formatToParts","PartitionNumberPattern","numberFormat","x","_a","_b","getInternalSlots","internalSlots","pl","dataLocaleData","numberingSystem","symbols","numbers","nu","magnitude","exponent","n","isNaN","nan","isFinite","infinity","style","Math","pow","formatNumberResult","formattedString","roundedNumber","sign","signDisplay"],"mappings":"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","sourcesContent":["import { FormatNumericToString } from './FormatNumericToString';\nimport { SameValue } from '../262';\nimport { ComputeExponent } from './ComputeExponent';\nimport formatToParts from './format_to_parts';\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nexport function PartitionNumberPattern(numberFormat, x, _a) {\n    var _b;\n    var getInternalSlots = _a.getInternalSlots;\n    var internalSlots = getInternalSlots(numberFormat);\n    var pl = internalSlots.pl, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    var symbols = dataLocaleData.numbers.symbols[numberingSystem] ||\n        dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n    var magnitude = 0;\n    var exponent = 0;\n    var n;\n    if (isNaN(x)) {\n        n = symbols.nan;\n    }\n    else if (!isFinite(x)) {\n        n = symbols.infinity;\n    }\n    else {\n        if (internalSlots.style === 'percent') {\n            x *= 100;\n        }\n        ;\n        _b = ComputeExponent(numberFormat, x, {\n            getInternalSlots: getInternalSlots,\n        }), exponent = _b[0], magnitude = _b[1];\n        // Preserve more precision by doing multiplication when exponent is negative.\n        x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n        var formatNumberResult = FormatNumericToString(internalSlots, x);\n        n = formatNumberResult.formattedString;\n        x = formatNumberResult.roundedNumber;\n    }\n    // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern\n    // We need to do this before `x` is rounded.\n    var sign;\n    var signDisplay = internalSlots.signDisplay;\n    switch (signDisplay) {\n        case 'never':\n            sign = 0;\n            break;\n        case 'auto':\n            if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n                sign = 0;\n            }\n            else {\n                sign = -1;\n            }\n            break;\n        case 'always':\n            if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n                sign = 1;\n            }\n            else {\n                sign = -1;\n            }\n            break;\n        default:\n            // x === 0 -> x is 0 or x is -0\n            if (x === 0 || isNaN(x)) {\n                sign = 0;\n            }\n            else if (x > 0) {\n                sign = 1;\n            }\n            else {\n                sign = -1;\n            }\n    }\n    return formatToParts({ roundedNumber: x, formattedString: n, exponent: exponent, magnitude: magnitude, sign: sign }, internalSlots.dataLocaleData, pl, internalSlots);\n}\n"]},"metadata":{},"sourceType":"module"}