{"ast":null,"code":"function getObjectPropertyValueByKey(obj, key) {\n  const map = new Map(Object.entries(obj));\n\n  if (obj.hasOwnProperty(key) && map) {\n    return map.get(key);\n  }\n}\n/**\r\n * Generates unique ID for give prefix.\r\n * @param {string} prefix Prefix for generated ID\r\n * @returns {boolean}\r\n */\n\n\nfunction getUniqueIdWithPrefix(prefix) {\n  const result = Math.floor(Math.random() * new Date().getTime()).toString();\n\n  if (!prefix) {\n    return result;\n  }\n\n  return `${prefix}${result}`;\n}\n/* eslint-disable no-useless-escape */\n\n\nfunction stringSnakeToCamel(str) {\n  return str.replace(/(\\-\\w)/g, function (m) {\n    return m[1].toUpperCase();\n  });\n}\n\nfunction toJSON(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  if (!value) {\n    return undefined;\n  } // (\"'\" => \"\\\"\");\n\n\n  const result = value.toString().split('').map(el => el !== \"'\" ? el : '\"').join('');\n  var jsonStr = result.replace(/(\\w+:)|(\\w+ :)/g, function (matched) {\n    return '\"' + matched.substring(0, matched.length - 1) + '\":';\n  });\n\n  try {\n    return JSON.parse(jsonStr);\n  } catch {\n    return undefined;\n  }\n}\n\nexport { getObjectPropertyValueByKey, getUniqueIdWithPrefix, stringSnakeToCamel, toJSON };","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/assets/ts/_utils/_TypesHelpers.ts"],"names":["getObjectPropertyValueByKey","obj","key","map","Map","Object","entries","hasOwnProperty","get","getUniqueIdWithPrefix","prefix","result","Math","floor","random","Date","getTime","toString","stringSnakeToCamel","str","replace","m","toUpperCase","toJSON","value","undefined","split","el","join","jsonStr","matched","substring","length","JSON","parse"],"mappings":"AAAA,SAASA,2BAAT,CAAqCC,GAArC,EAA+CC,GAA/C,EAA6E;AAC3E,QAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAeL,GAAf,CAAR,CAAZ;;AACA,MAAIA,GAAG,CAACM,cAAJ,CAAmBL,GAAnB,KAA2BC,GAA/B,EAAoC;AAClC,WAAOA,GAAG,CAACK,GAAJ,CAAQN,GAAR,CAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASO,qBAAT,CAA+BC,MAA/B,EAAmE;AACjE,QAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAAIC,IAAJ,GAAWC,OAAX,EAA3B,EAAiDC,QAAjD,EAAf;;AACA,MAAI,CAACP,MAAL,EAAa;AACX,WAAOC,MAAP;AACD;;AAED,SAAQ,GAAED,MAAO,GAAEC,MAAO,EAA1B;AACD;AAED;;;AACA,SAASO,kBAAT,CAA4BC,GAA5B,EAAiD;AAC/C,SAAOA,GAAG,CAACC,OAAJ,CAAY,SAAZ,EAAuB,UAAUC,CAAV,EAAa;AACzC,WAAOA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,EAAP;AACD,GAFM,CAAP;AAGD;;AAED,SAASC,MAAT,CAAgBC,KAAhB,EAAwD;AACtD,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AAED,MAAI,CAACA,KAAL,EAAY;AACV,WAAOC,SAAP;AACD,GAPqD,CAStD;;;AACA,QAAMd,MAAM,GAAGa,KAAK,CACjBP,QADY,GAEZS,KAFY,CAEN,EAFM,EAGZvB,GAHY,CAGPwB,EAAD,IAASA,EAAE,KAAK,GAAP,GAAaA,EAAb,GAAkB,GAHnB,EAIZC,IAJY,CAIP,EAJO,CAAf;AAKA,MAAIC,OAAO,GAAGlB,MAAM,CAACS,OAAP,CAAe,iBAAf,EAAkC,UAAUU,OAAV,EAAmB;AACjE,WAAO,MAAMA,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqBD,OAAO,CAACE,MAAR,GAAiB,CAAtC,CAAN,GAAiD,IAAxD;AACD,GAFa,CAAd;;AAGA,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAP;AACD,GAFD,CAEE,MAAM;AACN,WAAOJ,SAAP;AACD;AACF;;AAED,SAAQzB,2BAAR,EAAqCS,qBAArC,EAA4DS,kBAA5D,EAAgFK,MAAhF","sourcesContent":["function getObjectPropertyValueByKey(obj: any, key: string): any | undefined {\r\n  const map = new Map(Object.entries(obj))\r\n  if (obj.hasOwnProperty(key) && map) {\r\n    return map.get(key)\r\n  }\r\n}\r\n\r\n/**\r\n * Generates unique ID for give prefix.\r\n * @param {string} prefix Prefix for generated ID\r\n * @returns {boolean}\r\n */\r\nfunction getUniqueIdWithPrefix(prefix: string | undefined): string {\r\n  const result = Math.floor(Math.random() * new Date().getTime()).toString()\r\n  if (!prefix) {\r\n    return result\r\n  }\r\n\r\n  return `${prefix}${result}`\r\n}\r\n\r\n/* eslint-disable no-useless-escape */\r\nfunction stringSnakeToCamel(str: string): string {\r\n  return str.replace(/(\\-\\w)/g, function (m) {\r\n    return m[1].toUpperCase()\r\n  })\r\n}\r\n\r\nfunction toJSON(value: string | JSON): JSON | undefined {\r\n  if (typeof value !== 'string') {\r\n    return value\r\n  }\r\n\r\n  if (!value) {\r\n    return undefined\r\n  }\r\n\r\n  // (\"'\" => \"\\\"\");\r\n  const result = value\r\n    .toString()\r\n    .split('')\r\n    .map((el) => (el !== \"'\" ? el : '\"'))\r\n    .join('')\r\n  var jsonStr = result.replace(/(\\w+:)|(\\w+ :)/g, function (matched) {\r\n    return '\"' + matched.substring(0, matched.length - 1) + '\":'\r\n  })\r\n  try {\r\n    return JSON.parse(jsonStr)\r\n  } catch {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport {getObjectPropertyValueByKey, getUniqueIdWithPrefix, stringSnakeToCamel, toJSON}\r\n"]},"metadata":{},"sourceType":"module"}