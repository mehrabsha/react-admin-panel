{"ast":null,"code":"import { EventHandlerUtil, getUniqueIdWithPrefix, getObjectPropertyValueByKey, stringSnakeToCamel, getAttributeValueByBreakpoint, throttle, getCSS, DOMEventHandlerUtil, ElementStyleUtil } from '../_utils';\nexport class DrawerStore {\n  static set(instanceId, drawerComponentObj) {\n    if (DrawerStore.has(instanceId)) {\n      return;\n    }\n\n    DrawerStore.store.set(instanceId, drawerComponentObj);\n  }\n\n  static get(instanceId) {\n    if (!DrawerStore.has(instanceId)) {\n      return;\n    }\n\n    return DrawerStore.store.get(instanceId);\n  }\n\n  static remove(instanceId) {\n    if (!DrawerStore.has(instanceId)) {\n      return;\n    }\n\n    DrawerStore.store.delete(instanceId);\n  }\n\n  static has(instanceId) {\n    return DrawerStore.store.has(instanceId);\n  }\n\n  static getAllInstances() {\n    return DrawerStore.store;\n  }\n\n}\nDrawerStore.store = new Map();\nconst defaultDrawerOptions = {\n  overlay: true,\n  baseClass: 'drawer',\n  overlayClass: 'drawer-overlay',\n  direction: 'end'\n};\n\nclass DrawerComponent {\n  constructor(_element, options) {\n    this.element = void 0;\n    this.overlayElement = null;\n    this.toggleElement = null;\n    this.options = void 0;\n    this.instanceUid = void 0;\n    this.name = '';\n    this.shown = false;\n    this.lastWidth = 0;\n    this.closeElement = null;\n\n    this._handlers = () => {\n      const togglers = this._getOption('toggle');\n\n      const closers = this._getOption('close');\n\n      if (togglers !== null && togglers.length > 0) {\n        DOMEventHandlerUtil.on(document.body, togglers, 'click', e => {\n          e.preventDefault();\n          this.toggleElement = document.getElementById(togglers);\n\n          this._toggle();\n        });\n      }\n\n      if (closers !== null && closers.length > 0) {\n        DOMEventHandlerUtil.on(document.body, closers, 'click', e => {\n          e.preventDefault();\n          this.closeElement = document.getElementById(closers);\n\n          this._hide();\n        });\n      }\n    };\n\n    this._update = () => {\n      const width = String(this._getOption('width'));\n      const direction = String(this._getOption('direction')); // Reset state\n\n      const hasBaseClass = this.element.classList.contains(`${this.options.baseClass}-on`);\n      const bodyCanvasAttr = String(document.body.getAttribute(`data-kt-drawer-${this.name}-`));\n\n      if (hasBaseClass === true && bodyCanvasAttr === 'on') {\n        this.shown = true;\n      } else {\n        this.shown = false;\n      } // Activate/deactivate\n\n\n      if (this._getOption('activate') === true) {\n        this.element.classList.add(this.options.baseClass);\n        this.element.classList.add(`${this.options.baseClass}-${direction}`);\n        ElementStyleUtil.set(this.element, 'width', width, true);\n        this.lastWidth = parseInt(width);\n      } else {\n        ElementStyleUtil.set(this.element, 'width', '');\n        this.element.classList.remove(this.options.baseClass);\n        this.element.classList.remove(`${this.options.baseClass}-${direction}`);\n\n        this._hide();\n      }\n    };\n\n    this._getOption = name => {\n      const attr = this.element.getAttribute(`data-kt-drawer-${name}`);\n\n      if (attr) {\n        let value = getAttributeValueByBreakpoint(attr);\n\n        if (value !== null && String(value) === 'true') {\n          return true;\n        } else {\n          if (value !== null && String(value) === 'false') {\n            return false;\n          }\n        }\n\n        return value;\n      } else {\n        const optionName = stringSnakeToCamel(name);\n        const option = getObjectPropertyValueByKey(this.options, optionName);\n\n        if (option) {\n          return getAttributeValueByBreakpoint(option);\n        } else {\n          return null;\n        }\n      }\n    };\n\n    this._toggle = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.drawer.toggle') === false) {\n        return;\n      }\n\n      if (this.shown) {\n        this._hide();\n      } else {\n        this._show();\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.drawer.toggled');\n    };\n\n    this._hide = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.drawer.hide') === false) {\n        return;\n      }\n\n      this.shown = false;\n\n      this._deleteOverlay();\n\n      document.body.removeAttribute(`data-kt-drawer-${this.name}`);\n      document.body.removeAttribute(`data-kt-drawer`);\n      this.element.classList.remove(`${this.options.baseClass}-on`);\n\n      if (this.toggleElement != null) {\n        this.toggleElement.classList.remove('active');\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.drawer.after.hidden');\n    };\n\n    this._show = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.drawer.show') === false) {\n        return;\n      }\n\n      this.shown = true;\n\n      this._createOverlay();\n\n      document.body.setAttribute(`data-kt-drawer-${this.name}`, 'on');\n      document.body.setAttribute('data-kt-drawer', 'on');\n      this.element.classList.add(`${this.options.baseClass}-on`);\n\n      if (this.toggleElement !== null) {\n        this.toggleElement.classList.add('active');\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.drawer.shown');\n    };\n\n    this._createOverlay = () => {\n      if (this._getOption('overlay') === true) {\n        this.overlayElement = document.createElement('DIV');\n        const elementZIndex = getCSS(this.element, 'z-index');\n\n        if (elementZIndex) {\n          const overlayZindex = parseInt(elementZIndex) - 1;\n          ElementStyleUtil.set(this.overlayElement, 'z-index', overlayZindex); // update\n        }\n\n        document.body.append(this.overlayElement);\n\n        const overlayClassOption = this._getOption('overlay-class');\n\n        if (overlayClassOption) {\n          this.overlayElement.classList.add(overlayClassOption.toString());\n        }\n\n        this.overlayElement.addEventListener('click', e => {\n          e.preventDefault();\n\n          this._hide();\n        });\n      }\n    };\n\n    this._deleteOverlay = () => {\n      if (this.overlayElement !== null && this.overlayElement.parentNode) {\n        this.overlayElement.parentNode.removeChild(this.overlayElement);\n      }\n    };\n\n    this._getDirection = () => {\n      return String(this._getOption('direction')) === 'left' ? 'left' : 'right';\n    };\n\n    this._getWidth = () => {\n      let width = this._getOption('width');\n\n      if (width && width === 'auto') {\n        width = getCSS(this.element, 'width');\n      }\n\n      return width;\n    };\n\n    this.toggle = () => {\n      this._toggle();\n    };\n\n    this.show = () => {\n      this._show();\n    };\n\n    this.hide = () => {\n      this._hide();\n    };\n\n    this.isShown = () => {\n      return this.shown;\n    };\n\n    this.update = () => {\n      this._update();\n    };\n\n    this.goElement = () => {\n      return this.element;\n    };\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = name => {\n      return EventHandlerUtil.off(this.element, name);\n    };\n\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultDrawerOptions, options);\n    this.instanceUid = getUniqueIdWithPrefix('drawer');\n    this.overlayElement = null;\n    this.name = this.element.getAttribute('data-kt-drawer-name') || '';\n    this.shown = false;\n    this.toggleElement = null; // Event Handlers\n\n    this._handlers(); // Update Instance\n\n\n    this._update(); // Bind Instance\n\n\n    DrawerStore.set(this.element.id, this);\n  }\n\n  // Create Instances\n  static createInstances(selector) {\n    const elements = document.body.querySelectorAll(selector);\n    elements.forEach(element => {\n      const item = element;\n      let drawer = DrawerComponent.getInstance(item.id);\n\n      if (!drawer) {\n        drawer = new DrawerComponent(item, defaultDrawerOptions);\n      }\n\n      drawer.element = item;\n      drawer.hide();\n    });\n  } // Dismiss instances\n\n\n  // Global Initialization\n  static initGlobalHandlers() {\n    // Window Resize Handling\n    window.addEventListener('resize', function () {\n      let timer;\n      throttle(timer, () => {\n        // Locate and update Drawer instances on window resize\n        const elements = document.body.querySelectorAll('[data-kt-drawer=\"true\"]');\n        elements.forEach(el => {\n          const item = el;\n          const instance = DrawerComponent.getInstance(item.id);\n\n          if (instance) {\n            instance.element = item;\n            instance.update();\n          }\n        });\n      }, 200);\n    });\n  }\n\n}\n\nDrawerComponent.hasInstace = elementId => {\n  return DrawerStore.has(elementId);\n};\n\nDrawerComponent.getInstance = elementId => {\n  return DrawerStore.get(elementId);\n};\n\nDrawerComponent.hideAll = () => {\n  const oldInstances = DrawerStore.getAllInstances();\n  oldInstances.forEach(dr => {\n    dr.hide();\n  });\n};\n\nDrawerComponent.updateAll = () => {\n  const oldInstances = DrawerStore.getAllInstances();\n  oldInstances.forEach(dr => {\n    dr.update();\n  });\n};\n\nDrawerComponent.handleDismiss = () => {\n  // External drawer toggle handler\n  DOMEventHandlerUtil.on(document.body, '[data-kt-drawer-dismiss=\"true\"]', 'click', () => {\n    /* @ts-ignore */\n    const element = DrawerComponent.closest('[data-kt-drawer=\"true\"]');\n\n    if (element) {\n      const drawer = DrawerComponent.getInstance(element);\n\n      if (drawer && drawer.isShown()) {\n        drawer.hide();\n      }\n    }\n  });\n};\n\nDrawerComponent.bootstrap = () => {\n  DrawerComponent.createInstances('[data-kt-drawer=\"true\"]');\n  DrawerComponent.initGlobalHandlers();\n  DrawerComponent.handleDismiss();\n};\n\nDrawerComponent.reinitialization = () => {\n  DrawerComponent.createInstances('[data-kt-drawer=\"true\"]');\n  DrawerComponent.hideAll();\n  DrawerComponent.updateAll();\n  DrawerComponent.handleDismiss();\n};\n\nexport { DrawerComponent, defaultDrawerOptions };","map":{"version":3,"sources":["/Users/alireza/Desktop/Admin Panel/tosanex-admin-panel/src/src/_metronic/assets/ts/components/_DrawerComponent.ts"],"names":["EventHandlerUtil","getUniqueIdWithPrefix","getObjectPropertyValueByKey","stringSnakeToCamel","getAttributeValueByBreakpoint","throttle","getCSS","DOMEventHandlerUtil","ElementStyleUtil","DrawerStore","set","instanceId","drawerComponentObj","has","store","get","remove","delete","getAllInstances","Map","defaultDrawerOptions","overlay","baseClass","overlayClass","direction","DrawerComponent","constructor","_element","options","element","overlayElement","toggleElement","instanceUid","name","shown","lastWidth","closeElement","_handlers","togglers","_getOption","closers","length","on","document","body","e","preventDefault","getElementById","_toggle","_hide","_update","width","String","hasBaseClass","classList","contains","bodyCanvasAttr","getAttribute","add","parseInt","attr","value","optionName","option","trigger","_show","_deleteOverlay","removeAttribute","_createOverlay","setAttribute","createElement","elementZIndex","overlayZindex","append","overlayClassOption","toString","addEventListener","parentNode","removeChild","_getDirection","_getWidth","toggle","show","hide","isShown","update","goElement","handler","one","off","event","Object","assign","id","createInstances","selector","elements","querySelectorAll","forEach","item","drawer","getInstance","initGlobalHandlers","window","timer","el","instance","hasInstace","elementId","hideAll","oldInstances","dr","updateAll","handleDismiss","closest","bootstrap","reinitialization"],"mappings":"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","sourcesContent":["import {\r\n  EventHandlerUtil,\r\n  getUniqueIdWithPrefix,\r\n  getObjectPropertyValueByKey,\r\n  stringSnakeToCamel,\r\n  getAttributeValueByBreakpoint,\r\n  throttle,\r\n  getCSS,\r\n  DOMEventHandlerUtil,\r\n  ElementStyleUtil,\r\n} from '../_utils'\r\n\r\nexport class DrawerStore {\r\n  static store: Map<string, DrawerComponent> = new Map()\r\n\r\n  public static set(instanceId: string, drawerComponentObj: DrawerComponent): void {\r\n    if (DrawerStore.has(instanceId)) {\r\n      return\r\n    }\r\n\r\n    DrawerStore.store.set(instanceId, drawerComponentObj)\r\n  }\r\n\r\n  public static get(instanceId: string): DrawerComponent | undefined {\r\n    if (!DrawerStore.has(instanceId)) {\r\n      return\r\n    }\r\n    return DrawerStore.store.get(instanceId)\r\n  }\r\n\r\n  public static remove(instanceId: string): void {\r\n    if (!DrawerStore.has(instanceId)) {\r\n      return\r\n    }\r\n\r\n    DrawerStore.store.delete(instanceId)\r\n  }\r\n\r\n  public static has(instanceId: string): boolean {\r\n    return DrawerStore.store.has(instanceId)\r\n  }\r\n\r\n  public static getAllInstances() {\r\n    return DrawerStore.store\r\n  }\r\n}\r\n\r\nexport interface DrawerOptions {\r\n  overlay: boolean\r\n  baseClass: string\r\n  overlayClass: string\r\n  direction: string\r\n}\r\n\r\nconst defaultDrawerOptions: DrawerOptions = {\r\n  overlay: true,\r\n  baseClass: 'drawer',\r\n  overlayClass: 'drawer-overlay',\r\n  direction: 'end',\r\n}\r\n\r\nclass DrawerComponent {\r\n  element: HTMLElement\r\n  overlayElement: HTMLElement | null = null\r\n  toggleElement: HTMLElement | null = null\r\n  options: DrawerOptions\r\n  instanceUid: string\r\n  name: string = ''\r\n  shown: boolean = false\r\n  lastWidth: number = 0\r\n  closeElement: HTMLElement | null = null\r\n\r\n  constructor(_element: HTMLElement, options: DrawerOptions) {\r\n    this.element = _element\r\n    this.options = Object.assign(defaultDrawerOptions, options)\r\n    this.instanceUid = getUniqueIdWithPrefix('drawer')\r\n    this.overlayElement = null\r\n    this.name = this.element.getAttribute('data-kt-drawer-name') || ''\r\n    this.shown = false\r\n    this.toggleElement = null\r\n    // Event Handlers\r\n    this._handlers()\r\n    // Update Instance\r\n    this._update()\r\n    // Bind Instance\r\n    DrawerStore.set(this.element.id, this)\r\n  }\r\n\r\n  private _handlers = () => {\r\n    const togglers = this._getOption('toggle') as string\r\n    const closers = this._getOption('close') as string\r\n\r\n    if (togglers !== null && togglers.length > 0) {\r\n      DOMEventHandlerUtil.on(document.body, togglers, 'click', (e: Event) => {\r\n        e.preventDefault()\r\n        this.toggleElement = document.getElementById(togglers)\r\n        this._toggle()\r\n      })\r\n    }\r\n\r\n    if (closers !== null && closers.length > 0) {\r\n      DOMEventHandlerUtil.on(document.body, closers, 'click', (e: Event) => {\r\n        e.preventDefault()\r\n        this.closeElement = document.getElementById(closers)\r\n\r\n        this._hide()\r\n      })\r\n    }\r\n  }\r\n\r\n  private _update = () => {\r\n    const width = String(this._getOption('width'))\r\n    const direction = String(this._getOption('direction'))\r\n\r\n    // Reset state\r\n    const hasBaseClass = this.element.classList.contains(`${this.options.baseClass}-on`)\r\n    const bodyCanvasAttr = String(document.body.getAttribute(`data-kt-drawer-${this.name}-`))\r\n\r\n    if (hasBaseClass === true && bodyCanvasAttr === 'on') {\r\n      this.shown = true\r\n    } else {\r\n      this.shown = false\r\n    }\r\n\r\n    // Activate/deactivate\r\n    if (this._getOption('activate') === true) {\r\n      this.element.classList.add(this.options.baseClass)\r\n      this.element.classList.add(`${this.options.baseClass}-${direction}`)\r\n      ElementStyleUtil.set(this.element, 'width', width, true)\r\n\r\n      this.lastWidth = parseInt(width)\r\n    } else {\r\n      ElementStyleUtil.set(this.element, 'width', '')\r\n      this.element.classList.remove(this.options.baseClass)\r\n      this.element.classList.remove(`${this.options.baseClass}-${direction}`)\r\n      this._hide()\r\n    }\r\n  }\r\n\r\n  private _getOption = (name: string) => {\r\n    const attr = this.element.getAttribute(`data-kt-drawer-${name}`)\r\n    if (attr) {\r\n      let value = getAttributeValueByBreakpoint(attr)\r\n      if (value !== null && String(value) === 'true') {\r\n        return true\r\n      } else {\r\n        if (value !== null && String(value) === 'false') {\r\n          return false\r\n        }\r\n      }\r\n\r\n      return value\r\n    } else {\r\n      const optionName = stringSnakeToCamel(name)\r\n      const option = getObjectPropertyValueByKey(this.options, optionName)\r\n      if (option) {\r\n        return getAttributeValueByBreakpoint(option)\r\n      } else {\r\n        return null\r\n      }\r\n    }\r\n  }\r\n\r\n  private _toggle = () => {\r\n    if (EventHandlerUtil.trigger(this.element, 'kt.drawer.toggle') === false) {\r\n      return\r\n    }\r\n\r\n    if (this.shown) {\r\n      this._hide()\r\n    } else {\r\n      this._show()\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.drawer.toggled')\r\n  }\r\n\r\n  private _hide = () => {\r\n    if (EventHandlerUtil.trigger(this.element, 'kt.drawer.hide') === false) {\r\n      return\r\n    }\r\n\r\n    this.shown = false\r\n    this._deleteOverlay()\r\n    document.body.removeAttribute(`data-kt-drawer-${this.name}`)\r\n    document.body.removeAttribute(`data-kt-drawer`)\r\n    this.element.classList.remove(`${this.options.baseClass}-on`)\r\n    if (this.toggleElement != null) {\r\n      this.toggleElement.classList.remove('active')\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.drawer.after.hidden')\r\n  }\r\n\r\n  private _show = () => {\r\n    if (EventHandlerUtil.trigger(this.element, 'kt.drawer.show') === false) {\r\n      return\r\n    }\r\n\r\n    this.shown = true\r\n    this._createOverlay()\r\n    document.body.setAttribute(`data-kt-drawer-${this.name}`, 'on')\r\n    document.body.setAttribute('data-kt-drawer', 'on')\r\n    this.element.classList.add(`${this.options.baseClass}-on`)\r\n    if (this.toggleElement !== null) {\r\n      this.toggleElement.classList.add('active')\r\n    }\r\n\r\n    EventHandlerUtil.trigger(this.element, 'kt.drawer.shown')\r\n  }\r\n\r\n  private _createOverlay = () => {\r\n    if (this._getOption('overlay') === true) {\r\n      this.overlayElement = document.createElement('DIV')\r\n      const elementZIndex = getCSS(this.element, 'z-index')\r\n      if (elementZIndex) {\r\n        const overlayZindex = parseInt(elementZIndex) - 1\r\n        ElementStyleUtil.set(this.overlayElement, 'z-index', overlayZindex) // update\r\n      }\r\n      document.body.append(this.overlayElement)\r\n      const overlayClassOption = this._getOption('overlay-class')\r\n      if (overlayClassOption) {\r\n        this.overlayElement.classList.add(overlayClassOption.toString())\r\n      }\r\n      this.overlayElement.addEventListener('click', (e) => {\r\n        e.preventDefault()\r\n        this._hide()\r\n      })\r\n    }\r\n  }\r\n\r\n  private _deleteOverlay = () => {\r\n    if (this.overlayElement !== null && this.overlayElement.parentNode) {\r\n      this.overlayElement.parentNode.removeChild(this.overlayElement)\r\n    }\r\n  }\r\n\r\n  private _getDirection = () => {\r\n    return String(this._getOption('direction')) === 'left' ? 'left' : 'right'\r\n  }\r\n\r\n  private _getWidth = () => {\r\n    let width = this._getOption('width')\r\n    if (width && width === 'auto') {\r\n      width = getCSS(this.element, 'width')\r\n    }\r\n\r\n    return width\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n  public toggle = () => {\r\n    this._toggle()\r\n  }\r\n\r\n  public show = () => {\r\n    this._show()\r\n  }\r\n\r\n  public hide = () => {\r\n    this._hide()\r\n  }\r\n\r\n  public isShown = () => {\r\n    return this.shown\r\n  }\r\n\r\n  public update = () => {\r\n    this._update()\r\n  }\r\n\r\n  public goElement = () => {\r\n    return this.element\r\n  }\r\n\r\n  // Event API\r\n  public on = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.on(this.element, name, handler)\r\n  }\r\n\r\n  public one = (name: string, handler: Function) => {\r\n    return EventHandlerUtil.one(this.element, name, handler)\r\n  }\r\n\r\n  public off = (name: string) => {\r\n    return EventHandlerUtil.off(this.element, name)\r\n  }\r\n\r\n  public trigger = (name: string, event: Event) => {\r\n    return EventHandlerUtil.trigger(this.element, name, event)\r\n  }\r\n\r\n  // Static methods\r\n  public static hasInstace = (elementId: string): boolean => {\r\n    return DrawerStore.has(elementId)\r\n  }\r\n\r\n  public static getInstance = (elementId: string) => {\r\n    return DrawerStore.get(elementId)\r\n  }\r\n\r\n  public static hideAll = () => {\r\n    const oldInstances = DrawerStore.getAllInstances()\r\n    oldInstances.forEach((dr) => {\r\n      dr.hide()\r\n    })\r\n  }\r\n\r\n  public static updateAll = () => {\r\n    const oldInstances = DrawerStore.getAllInstances()\r\n    oldInstances.forEach((dr) => {\r\n      dr.update()\r\n    })\r\n  }\r\n\r\n  // Create Instances\r\n  public static createInstances(selector: string): void {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((element) => {\r\n      const item = element as HTMLElement\r\n      let drawer = DrawerComponent.getInstance(item.id)\r\n      if (!drawer) {\r\n        drawer = new DrawerComponent(item, defaultDrawerOptions)\r\n      }\r\n      drawer.element = item\r\n      drawer.hide()\r\n    })\r\n  }\r\n\r\n  // Dismiss instances\r\n  public static handleDismiss = () => {\r\n    // External drawer toggle handler\r\n    DOMEventHandlerUtil.on(document.body, '[data-kt-drawer-dismiss=\"true\"]', 'click', () => {\r\n      /* @ts-ignore */\r\n      const element = this.closest('[data-kt-drawer=\"true\"]')\r\n      if (element) {\r\n        const drawer = DrawerComponent.getInstance(element)\r\n        if (drawer && drawer.isShown()) {\r\n          drawer.hide()\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  // Global Initialization\r\n  public static initGlobalHandlers(): void {\r\n    // Window Resize Handling\r\n    window.addEventListener('resize', function () {\r\n      let timer: number | undefined\r\n      throttle(\r\n        timer,\r\n        () => {\r\n          // Locate and update Drawer instances on window resize\r\n          const elements = document.body.querySelectorAll('[data-kt-drawer=\"true\"]')\r\n          elements.forEach((el) => {\r\n            const item = el as HTMLElement\r\n            const instance = DrawerComponent.getInstance(item.id)\r\n            if (instance) {\r\n              instance.element = item\r\n              instance.update()\r\n            }\r\n          })\r\n        },\r\n        200\r\n      )\r\n    })\r\n  }\r\n\r\n  public static bootstrap = () => {\r\n    DrawerComponent.createInstances('[data-kt-drawer=\"true\"]')\r\n    DrawerComponent.initGlobalHandlers()\r\n    DrawerComponent.handleDismiss()\r\n  }\r\n\r\n  public static reinitialization = () => {\r\n    DrawerComponent.createInstances('[data-kt-drawer=\"true\"]')\r\n    DrawerComponent.hideAll()\r\n    DrawerComponent.updateAll()\r\n    DrawerComponent.handleDismiss()\r\n  }\r\n}\r\n\r\nexport {DrawerComponent, defaultDrawerOptions}\r\n"]},"metadata":{},"sourceType":"module"}